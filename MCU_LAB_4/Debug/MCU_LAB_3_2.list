
MCU_LAB_3_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030f0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080031fc  080031fc  000041fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003220  08003220  00005030  2**0
                  CONTENTS
  4 .ARM          00000000  08003220  08003220  00005030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003220  08003220  00005030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003220  08003220  00004220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003224  08003224  00004224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08003228  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  20000030  08003258  00005030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08003258  000054b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009022  00000000  00000000  00005059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ffb  00000000  00000000  0000e07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  00010078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000836  00000000  00000000  00010b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001740d  00000000  00000000  000113a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd71  00000000  00000000  000287b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008276a  00000000  00000000  00036524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8c8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d8  00000000  00000000  000b8cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000bb6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	080031e4 	.word	0x080031e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	080031e4 	.word	0x080031e4

0800014c <isButtonPressed>:
int KeyReg[10] = {0};
int TimeOutForKeyPress =  500;
int button_long_pressed[10]={0};
int button_flag[10]={0};
int state[10] = {0};
int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000009c 	.word	0x2000009c

08000180 <getKeyInput>:
		return 1;
	}
	return 0;
}

void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
//  KeyReg2 = KeyReg1;
//  KeyReg1 = KeyReg0;
  KeyReg[0] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000186:	2108      	movs	r1, #8
 8000188:	4854      	ldr	r0, [pc, #336]	@ (80002dc <getKeyInput+0x15c>)
 800018a:	f001 fffd 	bl	8002188 <HAL_GPIO_ReadPin>
 800018e:	4603      	mov	r3, r0
 8000190:	461a      	mov	r2, r3
 8000192:	4b53      	ldr	r3, [pc, #332]	@ (80002e0 <getKeyInput+0x160>)
 8000194:	601a      	str	r2, [r3, #0]
  KeyReg[1] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000196:	2120      	movs	r1, #32
 8000198:	4850      	ldr	r0, [pc, #320]	@ (80002dc <getKeyInput+0x15c>)
 800019a:	f001 fff5 	bl	8002188 <HAL_GPIO_ReadPin>
 800019e:	4603      	mov	r3, r0
 80001a0:	461a      	mov	r2, r3
 80001a2:	4b4f      	ldr	r3, [pc, #316]	@ (80002e0 <getKeyInput+0x160>)
 80001a4:	605a      	str	r2, [r3, #4]
  KeyReg[2] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80001a6:	2110      	movs	r1, #16
 80001a8:	484c      	ldr	r0, [pc, #304]	@ (80002dc <getKeyInput+0x15c>)
 80001aa:	f001 ffed 	bl	8002188 <HAL_GPIO_ReadPin>
 80001ae:	4603      	mov	r3, r0
 80001b0:	461a      	mov	r2, r3
 80001b2:	4b4b      	ldr	r3, [pc, #300]	@ (80002e0 <getKeyInput+0x160>)
 80001b4:	609a      	str	r2, [r3, #8]
//  KeyReg[5] = HAL_GPIO_ReadPin(BUTTON6_GPIO_Port, BUTTON6_Pin);
//  KeyReg[6] = HAL_GPIO_ReadPin(BUTTON7_GPIO_Port, BUTTON7_Pin);
//  KeyReg[7] = HAL_GPIO_ReadPin(BUTTON8_GPIO_Port, BUTTON8_Pin);
//  KeyReg[8] = HAL_GPIO_ReadPin(BUTTON9_GPIO_Port, BUTTON9_Pin);
//  KeyReg[9] = HAL_GPIO_ReadPin(BUTTON10_GPIO_Port, BUTTON10_Pin);
  for(int i=0;i<3;i++){
 80001b6:	2300      	movs	r3, #0
 80001b8:	607b      	str	r3, [r7, #4]
 80001ba:	e086      	b.n	80002ca <getKeyInput+0x14a>
	  switch(state[i]){
 80001bc:	4a49      	ldr	r2, [pc, #292]	@ (80002e4 <getKeyInput+0x164>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001c4:	2b04      	cmp	r3, #4
 80001c6:	d878      	bhi.n	80002ba <getKeyInput+0x13a>
 80001c8:	a201      	add	r2, pc, #4	@ (adr r2, 80001d0 <getKeyInput+0x50>)
 80001ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ce:	bf00      	nop
 80001d0:	080001e5 	.word	0x080001e5
 80001d4:	08000207 	.word	0x08000207
 80001d8:	0800022b 	.word	0x0800022b
 80001dc:	0800024f 	.word	0x0800024f
 80001e0:	08000285 	.word	0x08000285
	  	case 0:	// KeyReg2 == NORMAL_STATE && KeyReg1 == NORMAL_STATE
		  button_flag[i] = 0;
 80001e4:	4a40      	ldr	r2, [pc, #256]	@ (80002e8 <getKeyInput+0x168>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2100      	movs	r1, #0
 80001ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  if(KeyReg[i] == PRESSED_STATE) state[i] = 1;
 80001ee:	4a3c      	ldr	r2, [pc, #240]	@ (80002e0 <getKeyInput+0x160>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d161      	bne.n	80002be <getKeyInput+0x13e>
 80001fa:	4a3a      	ldr	r2, [pc, #232]	@ (80002e4 <getKeyInput+0x164>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	2101      	movs	r1, #1
 8000200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000204:	e05b      	b.n	80002be <getKeyInput+0x13e>
		case 1:	// KeyReg2 == NORMAL_STATE && KeyReg1 == PRESSED_STATE
			if (KeyReg[i] == PRESSED_STATE)
 8000206:	4a36      	ldr	r2, [pc, #216]	@ (80002e0 <getKeyInput+0x160>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d105      	bne.n	800021e <getKeyInput+0x9e>
				state[i] = 3;
 8000212:	4a34      	ldr	r2, [pc, #208]	@ (80002e4 <getKeyInput+0x164>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2103      	movs	r1, #3
 8000218:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			else
				state[i] = 2;
			break;
 800021c:	e052      	b.n	80002c4 <getKeyInput+0x144>
				state[i] = 2;
 800021e:	4a31      	ldr	r2, [pc, #196]	@ (80002e4 <getKeyInput+0x164>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2102      	movs	r1, #2
 8000224:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000228:	e04c      	b.n	80002c4 <getKeyInput+0x144>
		case 2:	// KeyReg2 == PRESSED_STATE && KeyReg1 == NORMAL_STATE
			if (KeyReg[i] == PRESSED_STATE)
 800022a:	4a2d      	ldr	r2, [pc, #180]	@ (80002e0 <getKeyInput+0x160>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d105      	bne.n	8000242 <getKeyInput+0xc2>
				state[i] = 1;
 8000236:	4a2b      	ldr	r2, [pc, #172]	@ (80002e4 <getKeyInput+0x164>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2101      	movs	r1, #1
 800023c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			else
				state[i] = 0;
			break;
 8000240:	e040      	b.n	80002c4 <getKeyInput+0x144>
				state[i] = 0;
 8000242:	4a28      	ldr	r2, [pc, #160]	@ (80002e4 <getKeyInput+0x164>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2100      	movs	r1, #0
 8000248:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800024c:	e03a      	b.n	80002c4 <getKeyInput+0x144>
		case 3:	// KeyReg2 == PRESSED_STATE && KeyReg1 == PRESSED_STATE
			if (KeyReg[i] == PRESSED_STATE) {
 800024e:	4a24      	ldr	r2, [pc, #144]	@ (80002e0 <getKeyInput+0x160>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d10e      	bne.n	8000278 <getKeyInput+0xf8>
				button_flag[i] = 1;
 800025a:	4a23      	ldr	r2, [pc, #140]	@ (80002e8 <getKeyInput+0x168>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2101      	movs	r1, #1
 8000260:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				TimeOutForKeyPress = 500;
 8000264:	4b21      	ldr	r3, [pc, #132]	@ (80002ec <getKeyInput+0x16c>)
 8000266:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800026a:	601a      	str	r2, [r3, #0]
				state[i] = 4;
 800026c:	4a1d      	ldr	r2, [pc, #116]	@ (80002e4 <getKeyInput+0x164>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2104      	movs	r1, #4
 8000272:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			} else
				state[i] = 1;
			break;
 8000276:	e025      	b.n	80002c4 <getKeyInput+0x144>
				state[i] = 1;
 8000278:	4a1a      	ldr	r2, [pc, #104]	@ (80002e4 <getKeyInput+0x164>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2101      	movs	r1, #1
 800027e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000282:	e01f      	b.n	80002c4 <getKeyInput+0x144>
		case 4: // KeyReg2 == NORMAL_STATE && KeyReg1 == NORMAL_STATE && KeyReg0 = PRESSED_STATE
			if (KeyReg[i] != PRESSED_STATE) {
 8000284:	4a16      	ldr	r2, [pc, #88]	@ (80002e0 <getKeyInput+0x160>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d005      	beq.n	800029c <getKeyInput+0x11c>
				state[i] = 1;
 8000290:	4a14      	ldr	r2, [pc, #80]	@ (80002e4 <getKeyInput+0x164>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2101      	movs	r1, #1
 8000296:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800029a:	e013      	b.n	80002c4 <getKeyInput+0x144>
			}
			TimeOutForKeyPress--;
 800029c:	4b13      	ldr	r3, [pc, #76]	@ (80002ec <getKeyInput+0x16c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	3b01      	subs	r3, #1
 80002a2:	4a12      	ldr	r2, [pc, #72]	@ (80002ec <getKeyInput+0x16c>)
 80002a4:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0) button_long_pressed[i] = 1;
 80002a6:	4b11      	ldr	r3, [pc, #68]	@ (80002ec <getKeyInput+0x16c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d109      	bne.n	80002c2 <getKeyInput+0x142>
 80002ae:	4a10      	ldr	r2, [pc, #64]	@ (80002f0 <getKeyInput+0x170>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2101      	movs	r1, #1
 80002b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80002b8:	e003      	b.n	80002c2 <getKeyInput+0x142>
		default:
			break;
 80002ba:	bf00      	nop
 80002bc:	e002      	b.n	80002c4 <getKeyInput+0x144>
			break;
 80002be:	bf00      	nop
 80002c0:	e000      	b.n	80002c4 <getKeyInput+0x144>
			break;
 80002c2:	bf00      	nop
  for(int i=0;i<3;i++){
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	3301      	adds	r3, #1
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	f77f af75 	ble.w	80001bc <getKeyInput+0x3c>
	  }
  }
}
 80002d2:	bf00      	nop
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	40010c00 	.word	0x40010c00
 80002e0:	2000004c 	.word	0x2000004c
 80002e4:	200000c4 	.word	0x200000c4
 80002e8:	2000009c 	.word	0x2000009c
 80002ec:	20000000 	.word	0x20000000
 80002f0:	20000074 	.word	0x20000074

080002f4 <fsm_autorun>:
 */
#include "global.h"
#include "fsm_autorun.h"
int status_fsm = INIT;
int index_led = 0;
void fsm_autorun(){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	if(button_flag[0] && status_fsm < INIT){
 80002f8:	4bb6      	ldr	r3, [pc, #728]	@ (80005d4 <fsm_autorun+0x2e0>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d01f      	beq.n	8000340 <fsm_autorun+0x4c>
 8000300:	4bb5      	ldr	r3, [pc, #724]	@ (80005d8 <fsm_autorun+0x2e4>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b03      	cmp	r3, #3
 8000306:	dc1b      	bgt.n	8000340 <fsm_autorun+0x4c>
			status_fsm += 5;
 8000308:	4bb3      	ldr	r3, [pc, #716]	@ (80005d8 <fsm_autorun+0x2e4>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	3305      	adds	r3, #5
 800030e:	4ab2      	ldr	r2, [pc, #712]	@ (80005d8 <fsm_autorun+0x2e4>)
 8000310:	6013      	str	r3, [r2, #0]
			setTimer(3,250);
 8000312:	21fa      	movs	r1, #250	@ 0xfa
 8000314:	2003      	movs	r0, #3
 8000316:	f001 fbd5 	bl	8001ac4 <setTimer>
			update7SegBuffer(0, 0);
 800031a:	2100      	movs	r1, #0
 800031c:	2000      	movs	r0, #0
 800031e:	f000 ff6d 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(1, 1);
 8000322:	2101      	movs	r1, #1
 8000324:	2001      	movs	r0, #1
 8000326:	f000 ff69 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(2, 0);
 800032a:	2100      	movs	r1, #0
 800032c:	2002      	movs	r0, #2
 800032e:	f000 ff65 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(3, 1);
 8000332:	2101      	movs	r1, #1
 8000334:	2003      	movs	r0, #3
 8000336:	f000 ff61 	bl	80011fc <update7SegBuffer>
			button_flag[0] = 0;
 800033a:	4ba6      	ldr	r3, [pc, #664]	@ (80005d4 <fsm_autorun+0x2e0>)
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
	}
	switch(status_fsm){
 8000340:	4ba5      	ldr	r3, [pc, #660]	@ (80005d8 <fsm_autorun+0x2e4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b04      	cmp	r3, #4
 8000346:	f200 8183 	bhi.w	8000650 <fsm_autorun+0x35c>
 800034a:	a201      	add	r2, pc, #4	@ (adr r2, 8000350 <fsm_autorun+0x5c>)
 800034c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000350:	08000417 	.word	0x08000417
 8000354:	08000479 	.word	0x08000479
 8000358:	080005f1 	.word	0x080005f1
 800035c:	08000527 	.word	0x08000527
 8000360:	08000365 	.word	0x08000365
	case INIT:
		status_fsm = RED_GREEN;
 8000364:	4b9c      	ldr	r3, [pc, #624]	@ (80005d8 <fsm_autorun+0x2e4>)
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
		setTimer(1, 1000*red_time);
 800036a:	4b9c      	ldr	r3, [pc, #624]	@ (80005dc <fsm_autorun+0x2e8>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000372:	fb02 f303 	mul.w	r3, r2, r3
 8000376:	4619      	mov	r1, r3
 8000378:	2001      	movs	r0, #1
 800037a:	f001 fba3 	bl	8001ac4 <setTimer>
		setTimer(2, 1000*green_time);
 800037e:	4b98      	ldr	r3, [pc, #608]	@ (80005e0 <fsm_autorun+0x2ec>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000386:	fb02 f303 	mul.w	r3, r2, r3
 800038a:	4619      	mov	r1, r3
 800038c:	2002      	movs	r0, #2
 800038e:	f001 fb99 	bl	8001ac4 <setTimer>
		setTimer(3,	200);
 8000392:	21c8      	movs	r1, #200	@ 0xc8
 8000394:	2003      	movs	r0, #3
 8000396:	f001 fb95 	bl	8001ac4 <setTimer>
		setTimer(4, 1000);
 800039a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800039e:	2004      	movs	r0, #4
 80003a0:	f001 fb90 	bl	8001ac4 <setTimer>

		update7SegBuffer(0,red_time/10);
 80003a4:	4b8d      	ldr	r3, [pc, #564]	@ (80005dc <fsm_autorun+0x2e8>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a8e      	ldr	r2, [pc, #568]	@ (80005e4 <fsm_autorun+0x2f0>)
 80003aa:	fb82 1203 	smull	r1, r2, r2, r3
 80003ae:	1092      	asrs	r2, r2, #2
 80003b0:	17db      	asrs	r3, r3, #31
 80003b2:	1ad3      	subs	r3, r2, r3
 80003b4:	4619      	mov	r1, r3
 80003b6:	2000      	movs	r0, #0
 80003b8:	f000 ff20 	bl	80011fc <update7SegBuffer>
		update7SegBuffer(1,red_time%10);
 80003bc:	4b87      	ldr	r3, [pc, #540]	@ (80005dc <fsm_autorun+0x2e8>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	4b88      	ldr	r3, [pc, #544]	@ (80005e4 <fsm_autorun+0x2f0>)
 80003c2:	fb83 1302 	smull	r1, r3, r3, r2
 80003c6:	1099      	asrs	r1, r3, #2
 80003c8:	17d3      	asrs	r3, r2, #31
 80003ca:	1ac9      	subs	r1, r1, r3
 80003cc:	460b      	mov	r3, r1
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	440b      	add	r3, r1
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	1ad1      	subs	r1, r2, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	f000 ff10 	bl	80011fc <update7SegBuffer>
		update7SegBuffer(2, green_time/10);
 80003dc:	4b80      	ldr	r3, [pc, #512]	@ (80005e0 <fsm_autorun+0x2ec>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a80      	ldr	r2, [pc, #512]	@ (80005e4 <fsm_autorun+0x2f0>)
 80003e2:	fb82 1203 	smull	r1, r2, r2, r3
 80003e6:	1092      	asrs	r2, r2, #2
 80003e8:	17db      	asrs	r3, r3, #31
 80003ea:	1ad3      	subs	r3, r2, r3
 80003ec:	4619      	mov	r1, r3
 80003ee:	2002      	movs	r0, #2
 80003f0:	f000 ff04 	bl	80011fc <update7SegBuffer>
		update7SegBuffer(3, green_time%10);
 80003f4:	4b7a      	ldr	r3, [pc, #488]	@ (80005e0 <fsm_autorun+0x2ec>)
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4b7a      	ldr	r3, [pc, #488]	@ (80005e4 <fsm_autorun+0x2f0>)
 80003fa:	fb83 1302 	smull	r1, r3, r3, r2
 80003fe:	1099      	asrs	r1, r3, #2
 8000400:	17d3      	asrs	r3, r2, #31
 8000402:	1ac9      	subs	r1, r1, r3
 8000404:	460b      	mov	r3, r1
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	440b      	add	r3, r1
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	1ad1      	subs	r1, r2, r3
 800040e:	2003      	movs	r0, #3
 8000410:	f000 fef4 	bl	80011fc <update7SegBuffer>
		break;
 8000414:	e125      	b.n	8000662 <fsm_autorun+0x36e>
	case RED_GREEN:
		led_red_and_green();
 8000416:	f000 ff0b 	bl	8001230 <led_red_and_green>
		if(flag_timer[2] == 1){
 800041a:	4b73      	ldr	r3, [pc, #460]	@ (80005e8 <fsm_autorun+0x2f4>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	2b01      	cmp	r3, #1
 8000420:	f040 8118 	bne.w	8000654 <fsm_autorun+0x360>
			status_fsm = RED_YELLOW;
 8000424:	4b6c      	ldr	r3, [pc, #432]	@ (80005d8 <fsm_autorun+0x2e4>)
 8000426:	2201      	movs	r2, #1
 8000428:	601a      	str	r2, [r3, #0]
			setTimer(2, 1000*yellow_time);
 800042a:	4b70      	ldr	r3, [pc, #448]	@ (80005ec <fsm_autorun+0x2f8>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000432:	fb02 f303 	mul.w	r3, r2, r3
 8000436:	4619      	mov	r1, r3
 8000438:	2002      	movs	r0, #2
 800043a:	f001 fb43 	bl	8001ac4 <setTimer>
			update7SegBuffer(2, yellow_time/10);
 800043e:	4b6b      	ldr	r3, [pc, #428]	@ (80005ec <fsm_autorun+0x2f8>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a68      	ldr	r2, [pc, #416]	@ (80005e4 <fsm_autorun+0x2f0>)
 8000444:	fb82 1203 	smull	r1, r2, r2, r3
 8000448:	1092      	asrs	r2, r2, #2
 800044a:	17db      	asrs	r3, r3, #31
 800044c:	1ad3      	subs	r3, r2, r3
 800044e:	4619      	mov	r1, r3
 8000450:	2002      	movs	r0, #2
 8000452:	f000 fed3 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(3, yellow_time%10);
 8000456:	4b65      	ldr	r3, [pc, #404]	@ (80005ec <fsm_autorun+0x2f8>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b62      	ldr	r3, [pc, #392]	@ (80005e4 <fsm_autorun+0x2f0>)
 800045c:	fb83 1302 	smull	r1, r3, r3, r2
 8000460:	1099      	asrs	r1, r3, #2
 8000462:	17d3      	asrs	r3, r2, #31
 8000464:	1ac9      	subs	r1, r1, r3
 8000466:	460b      	mov	r3, r1
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	440b      	add	r3, r1
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	1ad1      	subs	r1, r2, r3
 8000470:	2003      	movs	r0, #3
 8000472:	f000 fec3 	bl	80011fc <update7SegBuffer>
		}
		break;
 8000476:	e0ed      	b.n	8000654 <fsm_autorun+0x360>
	case RED_YELLOW:
		led_red_and_yellow();
 8000478:	f000 ff04 	bl	8001284 <led_red_and_yellow>
		if(flag_timer[2] == 1){
 800047c:	4b5a      	ldr	r3, [pc, #360]	@ (80005e8 <fsm_autorun+0x2f4>)
 800047e:	689b      	ldr	r3, [r3, #8]
 8000480:	2b01      	cmp	r3, #1
 8000482:	f040 80e9 	bne.w	8000658 <fsm_autorun+0x364>
			status_fsm = GREEN_RED;
 8000486:	4b54      	ldr	r3, [pc, #336]	@ (80005d8 <fsm_autorun+0x2e4>)
 8000488:	2202      	movs	r2, #2
 800048a:	601a      	str	r2, [r3, #0]
			setTimer(1,1000*green_time);
 800048c:	4b54      	ldr	r3, [pc, #336]	@ (80005e0 <fsm_autorun+0x2ec>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000494:	fb02 f303 	mul.w	r3, r2, r3
 8000498:	4619      	mov	r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	f001 fb12 	bl	8001ac4 <setTimer>
			setTimer(2, 1000*red_time);
 80004a0:	4b4e      	ldr	r3, [pc, #312]	@ (80005dc <fsm_autorun+0x2e8>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004a8:	fb02 f303 	mul.w	r3, r2, r3
 80004ac:	4619      	mov	r1, r3
 80004ae:	2002      	movs	r0, #2
 80004b0:	f001 fb08 	bl	8001ac4 <setTimer>
			update7SegBuffer(0, green_time/10);
 80004b4:	4b4a      	ldr	r3, [pc, #296]	@ (80005e0 <fsm_autorun+0x2ec>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a4a      	ldr	r2, [pc, #296]	@ (80005e4 <fsm_autorun+0x2f0>)
 80004ba:	fb82 1203 	smull	r1, r2, r2, r3
 80004be:	1092      	asrs	r2, r2, #2
 80004c0:	17db      	asrs	r3, r3, #31
 80004c2:	1ad3      	subs	r3, r2, r3
 80004c4:	4619      	mov	r1, r3
 80004c6:	2000      	movs	r0, #0
 80004c8:	f000 fe98 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(1, green_time%10);
 80004cc:	4b44      	ldr	r3, [pc, #272]	@ (80005e0 <fsm_autorun+0x2ec>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b44      	ldr	r3, [pc, #272]	@ (80005e4 <fsm_autorun+0x2f0>)
 80004d2:	fb83 1302 	smull	r1, r3, r3, r2
 80004d6:	1099      	asrs	r1, r3, #2
 80004d8:	17d3      	asrs	r3, r2, #31
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	460b      	mov	r3, r1
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	440b      	add	r3, r1
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	1ad1      	subs	r1, r2, r3
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 fe88 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(2, red_time/10);
 80004ec:	4b3b      	ldr	r3, [pc, #236]	@ (80005dc <fsm_autorun+0x2e8>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a3c      	ldr	r2, [pc, #240]	@ (80005e4 <fsm_autorun+0x2f0>)
 80004f2:	fb82 1203 	smull	r1, r2, r2, r3
 80004f6:	1092      	asrs	r2, r2, #2
 80004f8:	17db      	asrs	r3, r3, #31
 80004fa:	1ad3      	subs	r3, r2, r3
 80004fc:	4619      	mov	r1, r3
 80004fe:	2002      	movs	r0, #2
 8000500:	f000 fe7c 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(3, red_time%10);
 8000504:	4b35      	ldr	r3, [pc, #212]	@ (80005dc <fsm_autorun+0x2e8>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b36      	ldr	r3, [pc, #216]	@ (80005e4 <fsm_autorun+0x2f0>)
 800050a:	fb83 1302 	smull	r1, r3, r3, r2
 800050e:	1099      	asrs	r1, r3, #2
 8000510:	17d3      	asrs	r3, r2, #31
 8000512:	1ac9      	subs	r1, r1, r3
 8000514:	460b      	mov	r3, r1
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	440b      	add	r3, r1
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	1ad1      	subs	r1, r2, r3
 800051e:	2003      	movs	r0, #3
 8000520:	f000 fe6c 	bl	80011fc <update7SegBuffer>
		}
		break;
 8000524:	e098      	b.n	8000658 <fsm_autorun+0x364>
	case YELLOW_RED:
		led_yellow_and_red();
 8000526:	f000 ff01 	bl	800132c <led_yellow_and_red>
		if(flag_timer[1] ==1){
 800052a:	4b2f      	ldr	r3, [pc, #188]	@ (80005e8 <fsm_autorun+0x2f4>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	2b01      	cmp	r3, #1
 8000530:	f040 8094 	bne.w	800065c <fsm_autorun+0x368>
			status_fsm = RED_GREEN;
 8000534:	4b28      	ldr	r3, [pc, #160]	@ (80005d8 <fsm_autorun+0x2e4>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
			setTimer(1,1000*red_time);
 800053a:	4b28      	ldr	r3, [pc, #160]	@ (80005dc <fsm_autorun+0x2e8>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000542:	fb02 f303 	mul.w	r3, r2, r3
 8000546:	4619      	mov	r1, r3
 8000548:	2001      	movs	r0, #1
 800054a:	f001 fabb 	bl	8001ac4 <setTimer>
			setTimer(2,1000*green_time);
 800054e:	4b24      	ldr	r3, [pc, #144]	@ (80005e0 <fsm_autorun+0x2ec>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000556:	fb02 f303 	mul.w	r3, r2, r3
 800055a:	4619      	mov	r1, r3
 800055c:	2002      	movs	r0, #2
 800055e:	f001 fab1 	bl	8001ac4 <setTimer>
			update7SegBuffer(0, red_time/10);
 8000562:	4b1e      	ldr	r3, [pc, #120]	@ (80005dc <fsm_autorun+0x2e8>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a1f      	ldr	r2, [pc, #124]	@ (80005e4 <fsm_autorun+0x2f0>)
 8000568:	fb82 1203 	smull	r1, r2, r2, r3
 800056c:	1092      	asrs	r2, r2, #2
 800056e:	17db      	asrs	r3, r3, #31
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	4619      	mov	r1, r3
 8000574:	2000      	movs	r0, #0
 8000576:	f000 fe41 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(1, red_time%10);
 800057a:	4b18      	ldr	r3, [pc, #96]	@ (80005dc <fsm_autorun+0x2e8>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	4b19      	ldr	r3, [pc, #100]	@ (80005e4 <fsm_autorun+0x2f0>)
 8000580:	fb83 1302 	smull	r1, r3, r3, r2
 8000584:	1099      	asrs	r1, r3, #2
 8000586:	17d3      	asrs	r3, r2, #31
 8000588:	1ac9      	subs	r1, r1, r3
 800058a:	460b      	mov	r3, r1
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	440b      	add	r3, r1
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	1ad1      	subs	r1, r2, r3
 8000594:	2001      	movs	r0, #1
 8000596:	f000 fe31 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(2, green_time/10);
 800059a:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <fsm_autorun+0x2ec>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a11      	ldr	r2, [pc, #68]	@ (80005e4 <fsm_autorun+0x2f0>)
 80005a0:	fb82 1203 	smull	r1, r2, r2, r3
 80005a4:	1092      	asrs	r2, r2, #2
 80005a6:	17db      	asrs	r3, r3, #31
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	4619      	mov	r1, r3
 80005ac:	2002      	movs	r0, #2
 80005ae:	f000 fe25 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(3, green_time%10);
 80005b2:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <fsm_autorun+0x2ec>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <fsm_autorun+0x2f0>)
 80005b8:	fb83 1302 	smull	r1, r3, r3, r2
 80005bc:	1099      	asrs	r1, r3, #2
 80005be:	17d3      	asrs	r3, r2, #31
 80005c0:	1ac9      	subs	r1, r1, r3
 80005c2:	460b      	mov	r3, r1
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	440b      	add	r3, r1
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	1ad1      	subs	r1, r2, r3
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 fe15 	bl	80011fc <update7SegBuffer>
		}
		break;
 80005d2:	e043      	b.n	800065c <fsm_autorun+0x368>
 80005d4:	2000009c 	.word	0x2000009c
 80005d8:	20000004 	.word	0x20000004
 80005dc:	20000008 	.word	0x20000008
 80005e0:	20000010 	.word	0x20000010
 80005e4:	66666667 	.word	0x66666667
 80005e8:	2000048c 	.word	0x2000048c
 80005ec:	2000000c 	.word	0x2000000c
	case GREEN_RED:
		led_green_and_red();
 80005f0:	f000 fe72 	bl	80012d8 <led_green_and_red>
		if(flag_timer[1] == 1){
 80005f4:	4b37      	ldr	r3, [pc, #220]	@ (80006d4 <fsm_autorun+0x3e0>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d131      	bne.n	8000660 <fsm_autorun+0x36c>
			status_fsm = YELLOW_RED;
 80005fc:	4b36      	ldr	r3, [pc, #216]	@ (80006d8 <fsm_autorun+0x3e4>)
 80005fe:	2203      	movs	r2, #3
 8000600:	601a      	str	r2, [r3, #0]
			setTimer(1,1000*yellow_time);
 8000602:	4b36      	ldr	r3, [pc, #216]	@ (80006dc <fsm_autorun+0x3e8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800060a:	fb02 f303 	mul.w	r3, r2, r3
 800060e:	4619      	mov	r1, r3
 8000610:	2001      	movs	r0, #1
 8000612:	f001 fa57 	bl	8001ac4 <setTimer>
			update7SegBuffer(0, yellow_time/10);
 8000616:	4b31      	ldr	r3, [pc, #196]	@ (80006dc <fsm_autorun+0x3e8>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a31      	ldr	r2, [pc, #196]	@ (80006e0 <fsm_autorun+0x3ec>)
 800061c:	fb82 1203 	smull	r1, r2, r2, r3
 8000620:	1092      	asrs	r2, r2, #2
 8000622:	17db      	asrs	r3, r3, #31
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	4619      	mov	r1, r3
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fde7 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(1, yellow_time%10);
 800062e:	4b2b      	ldr	r3, [pc, #172]	@ (80006dc <fsm_autorun+0x3e8>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	4b2b      	ldr	r3, [pc, #172]	@ (80006e0 <fsm_autorun+0x3ec>)
 8000634:	fb83 1302 	smull	r1, r3, r3, r2
 8000638:	1099      	asrs	r1, r3, #2
 800063a:	17d3      	asrs	r3, r2, #31
 800063c:	1ac9      	subs	r1, r1, r3
 800063e:	460b      	mov	r3, r1
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	440b      	add	r3, r1
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	1ad1      	subs	r1, r2, r3
 8000648:	2001      	movs	r0, #1
 800064a:	f000 fdd7 	bl	80011fc <update7SegBuffer>
		}
		break;
 800064e:	e007      	b.n	8000660 <fsm_autorun+0x36c>
	default:
		break;
 8000650:	bf00      	nop
 8000652:	e006      	b.n	8000662 <fsm_autorun+0x36e>
		break;
 8000654:	bf00      	nop
 8000656:	e004      	b.n	8000662 <fsm_autorun+0x36e>
		break;
 8000658:	bf00      	nop
 800065a:	e002      	b.n	8000662 <fsm_autorun+0x36e>
		break;
 800065c:	bf00      	nop
 800065e:	e000      	b.n	8000662 <fsm_autorun+0x36e>
		break;
 8000660:	bf00      	nop
	}
	if(status_fsm <= INIT){
 8000662:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <fsm_autorun+0x3e4>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b04      	cmp	r3, #4
 8000668:	dc31      	bgt.n	80006ce <fsm_autorun+0x3da>
		if(flag_timer[3] == 1){
 800066a:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <fsm_autorun+0x3e0>)
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d116      	bne.n	80006a0 <fsm_autorun+0x3ac>
			update7SEG(index_led++);
 8000672:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <fsm_autorun+0x3f0>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	1c5a      	adds	r2, r3, #1
 8000678:	491a      	ldr	r1, [pc, #104]	@ (80006e4 <fsm_autorun+0x3f0>)
 800067a:	600a      	str	r2, [r1, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fd47 	bl	8001110 <update7SEG>
			index_led%=4;
 8000682:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <fsm_autorun+0x3f0>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	425a      	negs	r2, r3
 8000688:	f003 0303 	and.w	r3, r3, #3
 800068c:	f002 0203 	and.w	r2, r2, #3
 8000690:	bf58      	it	pl
 8000692:	4253      	negpl	r3, r2
 8000694:	4a13      	ldr	r2, [pc, #76]	@ (80006e4 <fsm_autorun+0x3f0>)
 8000696:	6013      	str	r3, [r2, #0]
			setTimer(3,200);
 8000698:	21c8      	movs	r1, #200	@ 0xc8
 800069a:	2003      	movs	r0, #3
 800069c:	f001 fa12 	bl	8001ac4 <setTimer>
		}
		if(flag_timer[4] == 1){
 80006a0:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <fsm_autorun+0x3e0>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d112      	bne.n	80006ce <fsm_autorun+0x3da>
			update7SegBuffer(1,led_buffer[1]-1);
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <fsm_autorun+0x3f4>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	4619      	mov	r1, r3
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 fda3 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(3, led_buffer[3]-1);
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <fsm_autorun+0x3f4>)
 80006b8:	68db      	ldr	r3, [r3, #12]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	4619      	mov	r1, r3
 80006be:	2003      	movs	r0, #3
 80006c0:	f000 fd9c 	bl	80011fc <update7SegBuffer>
			setTimer(4,1000);
 80006c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006c8:	2004      	movs	r0, #4
 80006ca:	f001 f9fb 	bl	8001ac4 <setTimer>
		}
	}
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000048c 	.word	0x2000048c
 80006d8:	20000004 	.word	0x20000004
 80006dc:	2000000c 	.word	0x2000000c
 80006e0:	66666667 	.word	0x66666667
 80006e4:	200000ec 	.word	0x200000ec
 80006e8:	20000014 	.word	0x20000014

080006ec <fsm_manual>:
 *  Created on: Nov 1, 2024
 *      Author: ADMIN
 */
#include "global.h"
#include "fsm_manual.h"
void fsm_manual(){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	if((button_flag[0]==1) && (status_fsm >= RED_GREEN_MANUAL) && (status_fsm <= YELLOW_RED_MANUAL)){
 80006f0:	4b3b      	ldr	r3, [pc, #236]	@ (80007e0 <fsm_manual+0xf4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d10d      	bne.n	8000714 <fsm_manual+0x28>
 80006f8:	4b3a      	ldr	r3, [pc, #232]	@ (80007e4 <fsm_manual+0xf8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	dd09      	ble.n	8000714 <fsm_manual+0x28>
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <fsm_manual+0xf8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b08      	cmp	r3, #8
 8000706:	dc05      	bgt.n	8000714 <fsm_manual+0x28>
		status_fsm = INIT_SETTING;
 8000708:	4b36      	ldr	r3, [pc, #216]	@ (80007e4 <fsm_manual+0xf8>)
 800070a:	220c      	movs	r2, #12
 800070c:	601a      	str	r2, [r3, #0]
		button_flag[0] = 0;
 800070e:	4b34      	ldr	r3, [pc, #208]	@ (80007e0 <fsm_manual+0xf4>)
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
	}
	switch(status_fsm){
 8000714:	4b33      	ldr	r3, [pc, #204]	@ (80007e4 <fsm_manual+0xf8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3b05      	subs	r3, #5
 800071a:	2b03      	cmp	r3, #3
 800071c:	d83a      	bhi.n	8000794 <fsm_manual+0xa8>
 800071e:	a201      	add	r2, pc, #4	@ (adr r2, 8000724 <fsm_manual+0x38>)
 8000720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000724:	08000735 	.word	0x08000735
 8000728:	0800074d 	.word	0x0800074d
 800072c:	08000765 	.word	0x08000765
 8000730:	0800077d 	.word	0x0800077d
	case RED_GREEN_MANUAL:
		led_red_and_green();
 8000734:	f000 fd7c 	bl	8001230 <led_red_and_green>
		if(isButtonPressed(1)){
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff fd07 	bl	800014c <isButtonPressed>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d029      	beq.n	8000798 <fsm_manual+0xac>
			status_fsm = RED_YELLOW_MANUAL;
 8000744:	4b27      	ldr	r3, [pc, #156]	@ (80007e4 <fsm_manual+0xf8>)
 8000746:	2206      	movs	r2, #6
 8000748:	601a      	str	r2, [r3, #0]
		}
		break;
 800074a:	e025      	b.n	8000798 <fsm_manual+0xac>
	case RED_YELLOW_MANUAL:
		led_red_and_yellow();
 800074c:	f000 fd9a 	bl	8001284 <led_red_and_yellow>
		if(isButtonPressed(1)){
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff fcfb 	bl	800014c <isButtonPressed>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d01f      	beq.n	800079c <fsm_manual+0xb0>
			status_fsm = GREEN_RED_MANUAL;
 800075c:	4b21      	ldr	r3, [pc, #132]	@ (80007e4 <fsm_manual+0xf8>)
 800075e:	2207      	movs	r2, #7
 8000760:	601a      	str	r2, [r3, #0]
		}
		break;
 8000762:	e01b      	b.n	800079c <fsm_manual+0xb0>
	case GREEN_RED_MANUAL:
		led_green_and_red();
 8000764:	f000 fdb8 	bl	80012d8 <led_green_and_red>
		if(isButtonPressed(1)){
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff fcef 	bl	800014c <isButtonPressed>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d015      	beq.n	80007a0 <fsm_manual+0xb4>
			status_fsm = YELLOW_RED_MANUAL;
 8000774:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <fsm_manual+0xf8>)
 8000776:	2208      	movs	r2, #8
 8000778:	601a      	str	r2, [r3, #0]
		}
		break;
 800077a:	e011      	b.n	80007a0 <fsm_manual+0xb4>
	case YELLOW_RED_MANUAL:
		led_yellow_and_red();
 800077c:	f000 fdd6 	bl	800132c <led_yellow_and_red>
		if(isButtonPressed(1)){
 8000780:	2001      	movs	r0, #1
 8000782:	f7ff fce3 	bl	800014c <isButtonPressed>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d00b      	beq.n	80007a4 <fsm_manual+0xb8>
			status_fsm = RED_GREEN_MANUAL;
 800078c:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <fsm_manual+0xf8>)
 800078e:	2205      	movs	r2, #5
 8000790:	601a      	str	r2, [r3, #0]
		}
		break;
 8000792:	e007      	b.n	80007a4 <fsm_manual+0xb8>
	default:
		break;
 8000794:	bf00      	nop
 8000796:	e006      	b.n	80007a6 <fsm_manual+0xba>
		break;
 8000798:	bf00      	nop
 800079a:	e004      	b.n	80007a6 <fsm_manual+0xba>
		break;
 800079c:	bf00      	nop
 800079e:	e002      	b.n	80007a6 <fsm_manual+0xba>
		break;
 80007a0:	bf00      	nop
 80007a2:	e000      	b.n	80007a6 <fsm_manual+0xba>
		break;
 80007a4:	bf00      	nop
	}
	if(flag_timer[3] == 1){
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <fsm_manual+0xfc>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d116      	bne.n	80007dc <fsm_manual+0xf0>
		update7SEG(index_led++);
 80007ae:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <fsm_manual+0x100>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	1c5a      	adds	r2, r3, #1
 80007b4:	490d      	ldr	r1, [pc, #52]	@ (80007ec <fsm_manual+0x100>)
 80007b6:	600a      	str	r2, [r1, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 fca9 	bl	8001110 <update7SEG>
		index_led%=4;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <fsm_manual+0x100>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	425a      	negs	r2, r3
 80007c4:	f003 0303 	and.w	r3, r3, #3
 80007c8:	f002 0203 	and.w	r2, r2, #3
 80007cc:	bf58      	it	pl
 80007ce:	4253      	negpl	r3, r2
 80007d0:	4a06      	ldr	r2, [pc, #24]	@ (80007ec <fsm_manual+0x100>)
 80007d2:	6013      	str	r3, [r2, #0]
		setTimer(3,250);
 80007d4:	21fa      	movs	r1, #250	@ 0xfa
 80007d6:	2003      	movs	r0, #3
 80007d8:	f001 f974 	bl	8001ac4 <setTimer>
	}
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000009c 	.word	0x2000009c
 80007e4:	20000004 	.word	0x20000004
 80007e8:	2000048c 	.word	0x2000048c
 80007ec:	200000ec 	.word	0x200000ec

080007f0 <fsm_setting>:
#include "fsm_setting.h"
#include "global.h"
int red_time_increase = 0;
int green_time_increase = 0;
int yellow_time_increase = 0;
void fsm_setting(){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	switch(status_fsm){
 80007f4:	4b85      	ldr	r3, [pc, #532]	@ (8000a0c <fsm_setting+0x21c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	3b09      	subs	r3, #9
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	f200 824f 	bhi.w	8000c9e <fsm_setting+0x4ae>
 8000800:	a201      	add	r2, pc, #4	@ (adr r2, 8000808 <fsm_setting+0x18>)
 8000802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000806:	bf00      	nop
 8000808:	080008ab 	.word	0x080008ab
 800080c:	08000b97 	.word	0x08000b97
 8000810:	08000a35 	.word	0x08000a35
 8000814:	08000819 	.word	0x08000819
	case INIT_SETTING:
		red_time_increase = 0;
 8000818:	4b7d      	ldr	r3, [pc, #500]	@ (8000a10 <fsm_setting+0x220>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
		green_time_increase = 0;
 800081e:	4b7d      	ldr	r3, [pc, #500]	@ (8000a14 <fsm_setting+0x224>)
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
		yellow_time_increase = 0;
 8000824:	4b7c      	ldr	r3, [pc, #496]	@ (8000a18 <fsm_setting+0x228>)
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
		index_led = 0;
 800082a:	4b7c      	ldr	r3, [pc, #496]	@ (8000a1c <fsm_setting+0x22c>)
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]

		status_fsm = RED_SETTING;
 8000830:	4b76      	ldr	r3, [pc, #472]	@ (8000a0c <fsm_setting+0x21c>)
 8000832:	2209      	movs	r2, #9
 8000834:	601a      	str	r2, [r3, #0]

		all_led_red_on();
 8000836:	f000 fda3 	bl	8001380 <all_led_red_on>
		all_led_yellow_off();
 800083a:	f000 fdd7 	bl	80013ec <all_led_yellow_off>
		all_led_green_off();
 800083e:	f000 fdf9 	bl	8001434 <all_led_green_off>

		setTimer(3,250);
 8000842:	21fa      	movs	r1, #250	@ 0xfa
 8000844:	2003      	movs	r0, #3
 8000846:	f001 f93d 	bl	8001ac4 <setTimer>
		setTimer(4,500);
 800084a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800084e:	2004      	movs	r0, #4
 8000850:	f001 f938 	bl	8001ac4 <setTimer>

		update7SegBuffer(0,(red_time_increase + red_time)/10);
 8000854:	4b6e      	ldr	r3, [pc, #440]	@ (8000a10 <fsm_setting+0x220>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b71      	ldr	r3, [pc, #452]	@ (8000a20 <fsm_setting+0x230>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4413      	add	r3, r2
 800085e:	4a71      	ldr	r2, [pc, #452]	@ (8000a24 <fsm_setting+0x234>)
 8000860:	fb82 1203 	smull	r1, r2, r2, r3
 8000864:	1092      	asrs	r2, r2, #2
 8000866:	17db      	asrs	r3, r3, #31
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	4619      	mov	r1, r3
 800086c:	2000      	movs	r0, #0
 800086e:	f000 fcc5 	bl	80011fc <update7SegBuffer>
		update7SegBuffer(1,(red_time_increase + red_time)%10);
 8000872:	4b67      	ldr	r3, [pc, #412]	@ (8000a10 <fsm_setting+0x220>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	4b6a      	ldr	r3, [pc, #424]	@ (8000a20 <fsm_setting+0x230>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	441a      	add	r2, r3
 800087c:	4b69      	ldr	r3, [pc, #420]	@ (8000a24 <fsm_setting+0x234>)
 800087e:	fb83 1302 	smull	r1, r3, r3, r2
 8000882:	1099      	asrs	r1, r3, #2
 8000884:	17d3      	asrs	r3, r2, #31
 8000886:	1ac9      	subs	r1, r1, r3
 8000888:	460b      	mov	r3, r1
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	440b      	add	r3, r1
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	1ad1      	subs	r1, r2, r3
 8000892:	2001      	movs	r0, #1
 8000894:	f000 fcb2 	bl	80011fc <update7SegBuffer>
		update7SegBuffer(2, 0);
 8000898:	2100      	movs	r1, #0
 800089a:	2002      	movs	r0, #2
 800089c:	f000 fcae 	bl	80011fc <update7SegBuffer>
		update7SegBuffer(3, 2);
 80008a0:	2102      	movs	r1, #2
 80008a2:	2003      	movs	r0, #3
 80008a4:	f000 fcaa 	bl	80011fc <update7SegBuffer>
		break;
 80008a8:	e200      	b.n	8000cac <fsm_setting+0x4bc>
	case RED_SETTING:
		if(isButtonPressed(0)){
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff fc4e 	bl	800014c <isButtonPressed>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d030      	beq.n	8000918 <fsm_setting+0x128>
			status_fsm = GREEN_SETTING;
 80008b6:	4b55      	ldr	r3, [pc, #340]	@ (8000a0c <fsm_setting+0x21c>)
 80008b8:	220b      	movs	r2, #11
 80008ba:	601a      	str	r2, [r3, #0]

			all_led_red_off();
 80008bc:	f000 fd72 	bl	80013a4 <all_led_red_off>
			all_led_green_on();
 80008c0:	f000 fda6 	bl	8001410 <all_led_green_on>

			update7SegBuffer(0,(green_time_increase + green_time)/10);
 80008c4:	4b53      	ldr	r3, [pc, #332]	@ (8000a14 <fsm_setting+0x224>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b57      	ldr	r3, [pc, #348]	@ (8000a28 <fsm_setting+0x238>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4413      	add	r3, r2
 80008ce:	4a55      	ldr	r2, [pc, #340]	@ (8000a24 <fsm_setting+0x234>)
 80008d0:	fb82 1203 	smull	r1, r2, r2, r3
 80008d4:	1092      	asrs	r2, r2, #2
 80008d6:	17db      	asrs	r3, r3, #31
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	4619      	mov	r1, r3
 80008dc:	2000      	movs	r0, #0
 80008de:	f000 fc8d 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(1,(green_time_increase + green_time)%10);
 80008e2:	4b4c      	ldr	r3, [pc, #304]	@ (8000a14 <fsm_setting+0x224>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4b50      	ldr	r3, [pc, #320]	@ (8000a28 <fsm_setting+0x238>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	441a      	add	r2, r3
 80008ec:	4b4d      	ldr	r3, [pc, #308]	@ (8000a24 <fsm_setting+0x234>)
 80008ee:	fb83 1302 	smull	r1, r3, r3, r2
 80008f2:	1099      	asrs	r1, r3, #2
 80008f4:	17d3      	asrs	r3, r2, #31
 80008f6:	1ac9      	subs	r1, r1, r3
 80008f8:	460b      	mov	r3, r1
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	440b      	add	r3, r1
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	1ad1      	subs	r1, r2, r3
 8000902:	2001      	movs	r0, #1
 8000904:	f000 fc7a 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(2, 0);
 8000908:	2100      	movs	r1, #0
 800090a:	2002      	movs	r0, #2
 800090c:	f000 fc76 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(3, 3);
 8000910:	2103      	movs	r1, #3
 8000912:	2003      	movs	r0, #3
 8000914:	f000 fc72 	bl	80011fc <update7SegBuffer>
		}
		if(isButtonPressed(1)){
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff fc17 	bl	800014c <isButtonPressed>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d032      	beq.n	800098a <fsm_setting+0x19a>
			red_time_increase++;
 8000924:	4b3a      	ldr	r3, [pc, #232]	@ (8000a10 <fsm_setting+0x220>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	3301      	adds	r3, #1
 800092a:	4a39      	ldr	r2, [pc, #228]	@ (8000a10 <fsm_setting+0x220>)
 800092c:	6013      	str	r3, [r2, #0]
			if(red_time_increase + red_time > 99) {
 800092e:	4b38      	ldr	r3, [pc, #224]	@ (8000a10 <fsm_setting+0x220>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4b3b      	ldr	r3, [pc, #236]	@ (8000a20 <fsm_setting+0x230>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4413      	add	r3, r2
 8000938:	2b63      	cmp	r3, #99	@ 0x63
 800093a:	dd04      	ble.n	8000946 <fsm_setting+0x156>
				red_time_increase = 0 - red_time;
 800093c:	4b38      	ldr	r3, [pc, #224]	@ (8000a20 <fsm_setting+0x230>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	425b      	negs	r3, r3
 8000942:	4a33      	ldr	r2, [pc, #204]	@ (8000a10 <fsm_setting+0x220>)
 8000944:	6013      	str	r3, [r2, #0]
			}
			update7SegBuffer(0,(red_time_increase + red_time)/10);
 8000946:	4b32      	ldr	r3, [pc, #200]	@ (8000a10 <fsm_setting+0x220>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4b35      	ldr	r3, [pc, #212]	@ (8000a20 <fsm_setting+0x230>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a34      	ldr	r2, [pc, #208]	@ (8000a24 <fsm_setting+0x234>)
 8000952:	fb82 1203 	smull	r1, r2, r2, r3
 8000956:	1092      	asrs	r2, r2, #2
 8000958:	17db      	asrs	r3, r3, #31
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	4619      	mov	r1, r3
 800095e:	2000      	movs	r0, #0
 8000960:	f000 fc4c 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(1,(red_time_increase + red_time)%10);
 8000964:	4b2a      	ldr	r3, [pc, #168]	@ (8000a10 <fsm_setting+0x220>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b2d      	ldr	r3, [pc, #180]	@ (8000a20 <fsm_setting+0x230>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	441a      	add	r2, r3
 800096e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a24 <fsm_setting+0x234>)
 8000970:	fb83 1302 	smull	r1, r3, r3, r2
 8000974:	1099      	asrs	r1, r3, #2
 8000976:	17d3      	asrs	r3, r2, #31
 8000978:	1ac9      	subs	r1, r1, r3
 800097a:	460b      	mov	r3, r1
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	440b      	add	r3, r1
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	1ad1      	subs	r1, r2, r3
 8000984:	2001      	movs	r0, #1
 8000986:	f000 fc39 	bl	80011fc <update7SegBuffer>
		}
		if(isButtonPressed(2)){
 800098a:	2002      	movs	r0, #2
 800098c:	f7ff fbde 	bl	800014c <isButtonPressed>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d025      	beq.n	80009e2 <fsm_setting+0x1f2>
			red_time += red_time_increase;
 8000996:	4b22      	ldr	r3, [pc, #136]	@ (8000a20 <fsm_setting+0x230>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <fsm_setting+0x220>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000a20 <fsm_setting+0x230>)
 80009a2:	6013      	str	r3, [r2, #0]
			red_time_increase = 0;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <fsm_setting+0x220>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
			update7SegBuffer(0,(red_time)/10);
 80009aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <fsm_setting+0x230>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a1d      	ldr	r2, [pc, #116]	@ (8000a24 <fsm_setting+0x234>)
 80009b0:	fb82 1203 	smull	r1, r2, r2, r3
 80009b4:	1092      	asrs	r2, r2, #2
 80009b6:	17db      	asrs	r3, r3, #31
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	4619      	mov	r1, r3
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 fc1d 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(1,(red_time)%10);
 80009c2:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <fsm_setting+0x230>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <fsm_setting+0x234>)
 80009c8:	fb83 1302 	smull	r1, r3, r3, r2
 80009cc:	1099      	asrs	r1, r3, #2
 80009ce:	17d3      	asrs	r3, r2, #31
 80009d0:	1ac9      	subs	r1, r1, r3
 80009d2:	460b      	mov	r3, r1
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	440b      	add	r3, r1
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	1ad1      	subs	r1, r2, r3
 80009dc:	2001      	movs	r0, #1
 80009de:	f000 fc0d 	bl	80011fc <update7SegBuffer>
		}
		if(flag_timer[4] == 1){
 80009e2:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <fsm_setting+0x23c>)
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	f040 815b 	bne.w	8000ca2 <fsm_setting+0x4b2>
			HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 80009ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f0:	480f      	ldr	r0, [pc, #60]	@ (8000a30 <fsm_setting+0x240>)
 80009f2:	f001 fbf8 	bl	80021e6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80009f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009fa:	480d      	ldr	r0, [pc, #52]	@ (8000a30 <fsm_setting+0x240>)
 80009fc:	f001 fbf3 	bl	80021e6 <HAL_GPIO_TogglePin>
			setTimer(4,500);
 8000a00:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000a04:	2004      	movs	r0, #4
 8000a06:	f001 f85d 	bl	8001ac4 <setTimer>
		}
		break;
 8000a0a:	e14a      	b.n	8000ca2 <fsm_setting+0x4b2>
 8000a0c:	20000004 	.word	0x20000004
 8000a10:	200000f0 	.word	0x200000f0
 8000a14:	200000f4 	.word	0x200000f4
 8000a18:	200000f8 	.word	0x200000f8
 8000a1c:	200000ec 	.word	0x200000ec
 8000a20:	20000008 	.word	0x20000008
 8000a24:	66666667 	.word	0x66666667
 8000a28:	20000010 	.word	0x20000010
 8000a2c:	2000048c 	.word	0x2000048c
 8000a30:	40010800 	.word	0x40010800
	case GREEN_SETTING:
		if(isButtonPressed(0)){
 8000a34:	2000      	movs	r0, #0
 8000a36:	f7ff fb89 	bl	800014c <isButtonPressed>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d02a      	beq.n	8000a96 <fsm_setting+0x2a6>
			status_fsm = YELLOW_SETTING;
 8000a40:	4ba9      	ldr	r3, [pc, #676]	@ (8000ce8 <fsm_setting+0x4f8>)
 8000a42:	220a      	movs	r2, #10
 8000a44:	601a      	str	r2, [r3, #0]

			all_led_green_off();
 8000a46:	f000 fcf5 	bl	8001434 <all_led_green_off>
			all_led_yellow_on();
 8000a4a:	f000 fcbd 	bl	80013c8 <all_led_yellow_on>

			update7SegBuffer(0, yellow_time/10);
 8000a4e:	4ba7      	ldr	r3, [pc, #668]	@ (8000cec <fsm_setting+0x4fc>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4aa7      	ldr	r2, [pc, #668]	@ (8000cf0 <fsm_setting+0x500>)
 8000a54:	fb82 1203 	smull	r1, r2, r2, r3
 8000a58:	1092      	asrs	r2, r2, #2
 8000a5a:	17db      	asrs	r3, r3, #31
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	2000      	movs	r0, #0
 8000a62:	f000 fbcb 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(1, yellow_time%10);
 8000a66:	4ba1      	ldr	r3, [pc, #644]	@ (8000cec <fsm_setting+0x4fc>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4ba1      	ldr	r3, [pc, #644]	@ (8000cf0 <fsm_setting+0x500>)
 8000a6c:	fb83 1302 	smull	r1, r3, r3, r2
 8000a70:	1099      	asrs	r1, r3, #2
 8000a72:	17d3      	asrs	r3, r2, #31
 8000a74:	1ac9      	subs	r1, r1, r3
 8000a76:	460b      	mov	r3, r1
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	1ad1      	subs	r1, r2, r3
 8000a80:	2001      	movs	r0, #1
 8000a82:	f000 fbbb 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(2, 0);
 8000a86:	2100      	movs	r1, #0
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f000 fbb7 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(3, 4);
 8000a8e:	2104      	movs	r1, #4
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 fbb3 	bl	80011fc <update7SegBuffer>
		}
		if(isButtonPressed(1)){
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff fb58 	bl	800014c <isButtonPressed>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d032      	beq.n	8000b08 <fsm_setting+0x318>
			green_time_increase++;
 8000aa2:	4b94      	ldr	r3, [pc, #592]	@ (8000cf4 <fsm_setting+0x504>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	4a92      	ldr	r2, [pc, #584]	@ (8000cf4 <fsm_setting+0x504>)
 8000aaa:	6013      	str	r3, [r2, #0]
			if(green_time_increase + green_time > 99) {
 8000aac:	4b91      	ldr	r3, [pc, #580]	@ (8000cf4 <fsm_setting+0x504>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b91      	ldr	r3, [pc, #580]	@ (8000cf8 <fsm_setting+0x508>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	2b63      	cmp	r3, #99	@ 0x63
 8000ab8:	dd04      	ble.n	8000ac4 <fsm_setting+0x2d4>
				green_time_increase = 0 - green_time;
 8000aba:	4b8f      	ldr	r3, [pc, #572]	@ (8000cf8 <fsm_setting+0x508>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	425b      	negs	r3, r3
 8000ac0:	4a8c      	ldr	r2, [pc, #560]	@ (8000cf4 <fsm_setting+0x504>)
 8000ac2:	6013      	str	r3, [r2, #0]
			}
			update7SegBuffer(0,(green_time_increase + green_time)/10);
 8000ac4:	4b8b      	ldr	r3, [pc, #556]	@ (8000cf4 <fsm_setting+0x504>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b8b      	ldr	r3, [pc, #556]	@ (8000cf8 <fsm_setting+0x508>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4413      	add	r3, r2
 8000ace:	4a88      	ldr	r2, [pc, #544]	@ (8000cf0 <fsm_setting+0x500>)
 8000ad0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad4:	1092      	asrs	r2, r2, #2
 8000ad6:	17db      	asrs	r3, r3, #31
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	4619      	mov	r1, r3
 8000adc:	2000      	movs	r0, #0
 8000ade:	f000 fb8d 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(1,(green_time_increase + green_time)%10);
 8000ae2:	4b84      	ldr	r3, [pc, #528]	@ (8000cf4 <fsm_setting+0x504>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	4b84      	ldr	r3, [pc, #528]	@ (8000cf8 <fsm_setting+0x508>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	441a      	add	r2, r3
 8000aec:	4b80      	ldr	r3, [pc, #512]	@ (8000cf0 <fsm_setting+0x500>)
 8000aee:	fb83 1302 	smull	r1, r3, r3, r2
 8000af2:	1099      	asrs	r1, r3, #2
 8000af4:	17d3      	asrs	r3, r2, #31
 8000af6:	1ac9      	subs	r1, r1, r3
 8000af8:	460b      	mov	r3, r1
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	440b      	add	r3, r1
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	1ad1      	subs	r1, r2, r3
 8000b02:	2001      	movs	r0, #1
 8000b04:	f000 fb7a 	bl	80011fc <update7SegBuffer>
		}
		if(isButtonPressed(2)){
 8000b08:	2002      	movs	r0, #2
 8000b0a:	f7ff fb1f 	bl	800014c <isButtonPressed>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d02b      	beq.n	8000b6c <fsm_setting+0x37c>
			green_time += green_time_increase;
 8000b14:	4b78      	ldr	r3, [pc, #480]	@ (8000cf8 <fsm_setting+0x508>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b76      	ldr	r3, [pc, #472]	@ (8000cf4 <fsm_setting+0x504>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a76      	ldr	r2, [pc, #472]	@ (8000cf8 <fsm_setting+0x508>)
 8000b20:	6013      	str	r3, [r2, #0]
			green_time_increase = 0;
 8000b22:	4b74      	ldr	r3, [pc, #464]	@ (8000cf4 <fsm_setting+0x504>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
			update7SegBuffer(0,(green_time_increase + green_time)/10);
 8000b28:	4b72      	ldr	r3, [pc, #456]	@ (8000cf4 <fsm_setting+0x504>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b72      	ldr	r3, [pc, #456]	@ (8000cf8 <fsm_setting+0x508>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4413      	add	r3, r2
 8000b32:	4a6f      	ldr	r2, [pc, #444]	@ (8000cf0 <fsm_setting+0x500>)
 8000b34:	fb82 1203 	smull	r1, r2, r2, r3
 8000b38:	1092      	asrs	r2, r2, #2
 8000b3a:	17db      	asrs	r3, r3, #31
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	4619      	mov	r1, r3
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 fb5b 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(1,(green_time_increase + green_time)%10);
 8000b46:	4b6b      	ldr	r3, [pc, #428]	@ (8000cf4 <fsm_setting+0x504>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b6b      	ldr	r3, [pc, #428]	@ (8000cf8 <fsm_setting+0x508>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	441a      	add	r2, r3
 8000b50:	4b67      	ldr	r3, [pc, #412]	@ (8000cf0 <fsm_setting+0x500>)
 8000b52:	fb83 1302 	smull	r1, r3, r3, r2
 8000b56:	1099      	asrs	r1, r3, #2
 8000b58:	17d3      	asrs	r3, r2, #31
 8000b5a:	1ac9      	subs	r1, r1, r3
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	440b      	add	r3, r1
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	1ad1      	subs	r1, r2, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	f000 fb48 	bl	80011fc <update7SegBuffer>
		}
		if(flag_timer[4] == 1){
 8000b6c:	4b63      	ldr	r3, [pc, #396]	@ (8000cfc <fsm_setting+0x50c>)
 8000b6e:	691b      	ldr	r3, [r3, #16]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	f040 8098 	bne.w	8000ca6 <fsm_setting+0x4b6>
			HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 8000b76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b7a:	4861      	ldr	r0, [pc, #388]	@ (8000d00 <fsm_setting+0x510>)
 8000b7c:	f001 fb33 	bl	80021e6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000b80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b84:	485e      	ldr	r0, [pc, #376]	@ (8000d00 <fsm_setting+0x510>)
 8000b86:	f001 fb2e 	bl	80021e6 <HAL_GPIO_TogglePin>
			setTimer(4,500);
 8000b8a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000b8e:	2004      	movs	r0, #4
 8000b90:	f000 ff98 	bl	8001ac4 <setTimer>
		}
		break;
 8000b94:	e087      	b.n	8000ca6 <fsm_setting+0x4b6>
	case YELLOW_SETTING:
		if(isButtonPressed(0)){
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff fad8 	bl	800014c <isButtonPressed>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d004      	beq.n	8000bac <fsm_setting+0x3bc>
			all_led_yellow_off();
 8000ba2:	f000 fc23 	bl	80013ec <all_led_yellow_off>
			status_fsm = INIT;
 8000ba6:	4b50      	ldr	r3, [pc, #320]	@ (8000ce8 <fsm_setting+0x4f8>)
 8000ba8:	2204      	movs	r2, #4
 8000baa:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1)){
 8000bac:	2001      	movs	r0, #1
 8000bae:	f7ff facd 	bl	800014c <isButtonPressed>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d032      	beq.n	8000c1e <fsm_setting+0x42e>
			yellow_time_increase++;
 8000bb8:	4b52      	ldr	r3, [pc, #328]	@ (8000d04 <fsm_setting+0x514>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	4a51      	ldr	r2, [pc, #324]	@ (8000d04 <fsm_setting+0x514>)
 8000bc0:	6013      	str	r3, [r2, #0]
			if(yellow_time_increase + yellow_time > 99) {
 8000bc2:	4b50      	ldr	r3, [pc, #320]	@ (8000d04 <fsm_setting+0x514>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	4b49      	ldr	r3, [pc, #292]	@ (8000cec <fsm_setting+0x4fc>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	2b63      	cmp	r3, #99	@ 0x63
 8000bce:	dd04      	ble.n	8000bda <fsm_setting+0x3ea>
				yellow_time_increase = 0 - yellow_time;
 8000bd0:	4b46      	ldr	r3, [pc, #280]	@ (8000cec <fsm_setting+0x4fc>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	425b      	negs	r3, r3
 8000bd6:	4a4b      	ldr	r2, [pc, #300]	@ (8000d04 <fsm_setting+0x514>)
 8000bd8:	6013      	str	r3, [r2, #0]
			}
			update7SegBuffer(0,(yellow_time_increase + yellow_time)/10);
 8000bda:	4b4a      	ldr	r3, [pc, #296]	@ (8000d04 <fsm_setting+0x514>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4b43      	ldr	r3, [pc, #268]	@ (8000cec <fsm_setting+0x4fc>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a42      	ldr	r2, [pc, #264]	@ (8000cf0 <fsm_setting+0x500>)
 8000be6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bea:	1092      	asrs	r2, r2, #2
 8000bec:	17db      	asrs	r3, r3, #31
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 fb02 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(1,(yellow_time_increase + yellow_time)%10);
 8000bf8:	4b42      	ldr	r3, [pc, #264]	@ (8000d04 <fsm_setting+0x514>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8000cec <fsm_setting+0x4fc>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	441a      	add	r2, r3
 8000c02:	4b3b      	ldr	r3, [pc, #236]	@ (8000cf0 <fsm_setting+0x500>)
 8000c04:	fb83 1302 	smull	r1, r3, r3, r2
 8000c08:	1099      	asrs	r1, r3, #2
 8000c0a:	17d3      	asrs	r3, r2, #31
 8000c0c:	1ac9      	subs	r1, r1, r3
 8000c0e:	460b      	mov	r3, r1
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	440b      	add	r3, r1
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	1ad1      	subs	r1, r2, r3
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f000 faef 	bl	80011fc <update7SegBuffer>
		}
		if(isButtonPressed(2)){
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f7ff fa94 	bl	800014c <isButtonPressed>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d025      	beq.n	8000c76 <fsm_setting+0x486>
			yellow_time += yellow_time_increase;
 8000c2a:	4b30      	ldr	r3, [pc, #192]	@ (8000cec <fsm_setting+0x4fc>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4b35      	ldr	r3, [pc, #212]	@ (8000d04 <fsm_setting+0x514>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a2d      	ldr	r2, [pc, #180]	@ (8000cec <fsm_setting+0x4fc>)
 8000c36:	6013      	str	r3, [r2, #0]
			yellow_time_increase = 0;
 8000c38:	4b32      	ldr	r3, [pc, #200]	@ (8000d04 <fsm_setting+0x514>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
			update7SegBuffer(0,yellow_time/10);
 8000c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cec <fsm_setting+0x4fc>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a2b      	ldr	r2, [pc, #172]	@ (8000cf0 <fsm_setting+0x500>)
 8000c44:	fb82 1203 	smull	r1, r2, r2, r3
 8000c48:	1092      	asrs	r2, r2, #2
 8000c4a:	17db      	asrs	r3, r3, #31
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	4619      	mov	r1, r3
 8000c50:	2000      	movs	r0, #0
 8000c52:	f000 fad3 	bl	80011fc <update7SegBuffer>
			update7SegBuffer(1,yellow_time%10);
 8000c56:	4b25      	ldr	r3, [pc, #148]	@ (8000cec <fsm_setting+0x4fc>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	4b25      	ldr	r3, [pc, #148]	@ (8000cf0 <fsm_setting+0x500>)
 8000c5c:	fb83 1302 	smull	r1, r3, r3, r2
 8000c60:	1099      	asrs	r1, r3, #2
 8000c62:	17d3      	asrs	r3, r2, #31
 8000c64:	1ac9      	subs	r1, r1, r3
 8000c66:	460b      	mov	r3, r1
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	1ad1      	subs	r1, r2, r3
 8000c70:	2001      	movs	r0, #1
 8000c72:	f000 fac3 	bl	80011fc <update7SegBuffer>

		}
		if(flag_timer[4] == 1){
 8000c76:	4b21      	ldr	r3, [pc, #132]	@ (8000cfc <fsm_setting+0x50c>)
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d115      	bne.n	8000caa <fsm_setting+0x4ba>
			HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 8000c7e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c82:	481f      	ldr	r0, [pc, #124]	@ (8000d00 <fsm_setting+0x510>)
 8000c84:	f001 faaf 	bl	80021e6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000c88:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c8c:	481c      	ldr	r0, [pc, #112]	@ (8000d00 <fsm_setting+0x510>)
 8000c8e:	f001 faaa 	bl	80021e6 <HAL_GPIO_TogglePin>
			setTimer(4,500);
 8000c92:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000c96:	2004      	movs	r0, #4
 8000c98:	f000 ff14 	bl	8001ac4 <setTimer>
		}
		break;
 8000c9c:	e005      	b.n	8000caa <fsm_setting+0x4ba>
	default:
		break;
 8000c9e:	bf00      	nop
 8000ca0:	e004      	b.n	8000cac <fsm_setting+0x4bc>
		break;
 8000ca2:	bf00      	nop
 8000ca4:	e002      	b.n	8000cac <fsm_setting+0x4bc>
		break;
 8000ca6:	bf00      	nop
 8000ca8:	e000      	b.n	8000cac <fsm_setting+0x4bc>
		break;
 8000caa:	bf00      	nop
	}
	if(flag_timer[3] == 1){
 8000cac:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <fsm_setting+0x50c>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d116      	bne.n	8000ce2 <fsm_setting+0x4f2>
		update7SEG(index_led++);
 8000cb4:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <fsm_setting+0x518>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	1c5a      	adds	r2, r3, #1
 8000cba:	4913      	ldr	r1, [pc, #76]	@ (8000d08 <fsm_setting+0x518>)
 8000cbc:	600a      	str	r2, [r1, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fa26 	bl	8001110 <update7SEG>
		index_led%=4;
 8000cc4:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <fsm_setting+0x518>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	425a      	negs	r2, r3
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	f002 0203 	and.w	r2, r2, #3
 8000cd2:	bf58      	it	pl
 8000cd4:	4253      	negpl	r3, r2
 8000cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8000d08 <fsm_setting+0x518>)
 8000cd8:	6013      	str	r3, [r2, #0]
		setTimer(3,250);
 8000cda:	21fa      	movs	r1, #250	@ 0xfa
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 fef1 	bl	8001ac4 <setTimer>
	}
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000004 	.word	0x20000004
 8000cec:	2000000c 	.word	0x2000000c
 8000cf0:	66666667 	.word	0x66666667
 8000cf4:	200000f4 	.word	0x200000f4
 8000cf8:	20000010 	.word	0x20000010
 8000cfc:	2000048c 	.word	0x2000048c
 8000d00:	40010800 	.word	0x40010800
 8000d04:	200000f8 	.word	0x200000f8
 8000d08:	200000ec 	.word	0x200000ec

08000d0c <display7SEG>:
 */
#include "main.h"
#include "timer.h"
#include "led7_segment.h"
int led_buffer[4] = {0,7,0,2};
void display7SEG(int num){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	switch(num){
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b09      	cmp	r3, #9
 8000d18:	f200 81c8 	bhi.w	80010ac <display7SEG+0x3a0>
 8000d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000d24 <display7SEG+0x18>)
 8000d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d22:	bf00      	nop
 8000d24:	08000d4d 	.word	0x08000d4d
 8000d28:	08000da3 	.word	0x08000da3
 8000d2c:	08000df9 	.word	0x08000df9
 8000d30:	08000e4f 	.word	0x08000e4f
 8000d34:	08000ea5 	.word	0x08000ea5
 8000d38:	08000efb 	.word	0x08000efb
 8000d3c:	08000f51 	.word	0x08000f51
 8000d40:	08000fa7 	.word	0x08000fa7
 8000d44:	08000ffd 	.word	0x08000ffd
 8000d48:	08001053 	.word	0x08001053
	case 0:
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET); //a
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d52:	48d5      	ldr	r0, [pc, #852]	@ (80010a8 <display7SEG+0x39c>)
 8000d54:	f001 fa2f 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET); //b
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d5e:	48d2      	ldr	r0, [pc, #840]	@ (80010a8 <display7SEG+0x39c>)
 8000d60:	f001 fa29 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);//c
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d6a:	48cf      	ldr	r0, [pc, #828]	@ (80010a8 <display7SEG+0x39c>)
 8000d6c:	f001 fa23 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);//d
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d76:	48cc      	ldr	r0, [pc, #816]	@ (80010a8 <display7SEG+0x39c>)
 8000d78:	f001 fa1d 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET); //e
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d82:	48c9      	ldr	r0, [pc, #804]	@ (80010a8 <display7SEG+0x39c>)
 8000d84:	f001 fa17 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET); //f
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d8e:	48c6      	ldr	r0, [pc, #792]	@ (80010a8 <display7SEG+0x39c>)
 8000d90:	f001 fa11 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,SET); //g
 8000d94:	2201      	movs	r2, #1
 8000d96:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d9a:	48c3      	ldr	r0, [pc, #780]	@ (80010a8 <display7SEG+0x39c>)
 8000d9c:	f001 fa0b 	bl	80021b6 <HAL_GPIO_WritePin>
		break;
 8000da0:	e1af      	b.n	8001102 <display7SEG+0x3f6>
	case 1:
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,SET); //a
 8000da2:	2201      	movs	r2, #1
 8000da4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000da8:	48bf      	ldr	r0, [pc, #764]	@ (80010a8 <display7SEG+0x39c>)
 8000daa:	f001 fa04 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET); //b
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000db4:	48bc      	ldr	r0, [pc, #752]	@ (80010a8 <display7SEG+0x39c>)
 8000db6:	f001 f9fe 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);//c
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dc0:	48b9      	ldr	r0, [pc, #740]	@ (80010a8 <display7SEG+0x39c>)
 8000dc2:	f001 f9f8 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,SET);//d
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dcc:	48b6      	ldr	r0, [pc, #728]	@ (80010a8 <display7SEG+0x39c>)
 8000dce:	f001 f9f2 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET); //e
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dd8:	48b3      	ldr	r0, [pc, #716]	@ (80010a8 <display7SEG+0x39c>)
 8000dda:	f001 f9ec 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET); //f
 8000dde:	2201      	movs	r2, #1
 8000de0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000de4:	48b0      	ldr	r0, [pc, #704]	@ (80010a8 <display7SEG+0x39c>)
 8000de6:	f001 f9e6 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,SET); //g
 8000dea:	2201      	movs	r2, #1
 8000dec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000df0:	48ad      	ldr	r0, [pc, #692]	@ (80010a8 <display7SEG+0x39c>)
 8000df2:	f001 f9e0 	bl	80021b6 <HAL_GPIO_WritePin>
		break;
 8000df6:	e184      	b.n	8001102 <display7SEG+0x3f6>
	case 2:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET); //a
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dfe:	48aa      	ldr	r0, [pc, #680]	@ (80010a8 <display7SEG+0x39c>)
 8000e00:	f001 f9d9 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET); //b
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e0a:	48a7      	ldr	r0, [pc, #668]	@ (80010a8 <display7SEG+0x39c>)
 8000e0c:	f001 f9d3 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET); //c
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e16:	48a4      	ldr	r0, [pc, #656]	@ (80010a8 <display7SEG+0x39c>)
 8000e18:	f001 f9cd 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET); //d
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e22:	48a1      	ldr	r0, [pc, #644]	@ (80010a8 <display7SEG+0x39c>)
 8000e24:	f001 f9c7 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET); //e
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e2e:	489e      	ldr	r0, [pc, #632]	@ (80010a8 <display7SEG+0x39c>)
 8000e30:	f001 f9c1 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET); //f
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e3a:	489b      	ldr	r0, [pc, #620]	@ (80010a8 <display7SEG+0x39c>)
 8000e3c:	f001 f9bb 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET); //g
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e46:	4898      	ldr	r0, [pc, #608]	@ (80010a8 <display7SEG+0x39c>)
 8000e48:	f001 f9b5 	bl	80021b6 <HAL_GPIO_WritePin>
		break;
 8000e4c:	e159      	b.n	8001102 <display7SEG+0x3f6>
	case 3:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET); //a
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e54:	4894      	ldr	r0, [pc, #592]	@ (80010a8 <display7SEG+0x39c>)
 8000e56:	f001 f9ae 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET); //b
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e60:	4891      	ldr	r0, [pc, #580]	@ (80010a8 <display7SEG+0x39c>)
 8000e62:	f001 f9a8 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET); //c
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e6c:	488e      	ldr	r0, [pc, #568]	@ (80010a8 <display7SEG+0x39c>)
 8000e6e:	f001 f9a2 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET); //d
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e78:	488b      	ldr	r0, [pc, #556]	@ (80010a8 <display7SEG+0x39c>)
 8000e7a:	f001 f99c 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET); //e
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e84:	4888      	ldr	r0, [pc, #544]	@ (80010a8 <display7SEG+0x39c>)
 8000e86:	f001 f996 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET); //f
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e90:	4885      	ldr	r0, [pc, #532]	@ (80010a8 <display7SEG+0x39c>)
 8000e92:	f001 f990 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET); //g
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e9c:	4882      	ldr	r0, [pc, #520]	@ (80010a8 <display7SEG+0x39c>)
 8000e9e:	f001 f98a 	bl	80021b6 <HAL_GPIO_WritePin>
		break;
 8000ea2:	e12e      	b.n	8001102 <display7SEG+0x3f6>
	case 4:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET); //a
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eaa:	487f      	ldr	r0, [pc, #508]	@ (80010a8 <display7SEG+0x39c>)
 8000eac:	f001 f983 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET); //b
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eb6:	487c      	ldr	r0, [pc, #496]	@ (80010a8 <display7SEG+0x39c>)
 8000eb8:	f001 f97d 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET); //c
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ec2:	4879      	ldr	r0, [pc, #484]	@ (80010a8 <display7SEG+0x39c>)
 8000ec4:	f001 f977 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET); //d
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ece:	4876      	ldr	r0, [pc, #472]	@ (80010a8 <display7SEG+0x39c>)
 8000ed0:	f001 f971 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET); //e
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eda:	4873      	ldr	r0, [pc, #460]	@ (80010a8 <display7SEG+0x39c>)
 8000edc:	f001 f96b 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET); //f
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ee6:	4870      	ldr	r0, [pc, #448]	@ (80010a8 <display7SEG+0x39c>)
 8000ee8:	f001 f965 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET); //g
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ef2:	486d      	ldr	r0, [pc, #436]	@ (80010a8 <display7SEG+0x39c>)
 8000ef4:	f001 f95f 	bl	80021b6 <HAL_GPIO_WritePin>
		break;
 8000ef8:	e103      	b.n	8001102 <display7SEG+0x3f6>
	case 5:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET); //a
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f00:	4869      	ldr	r0, [pc, #420]	@ (80010a8 <display7SEG+0x39c>)
 8000f02:	f001 f958 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET); //b
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f0c:	4866      	ldr	r0, [pc, #408]	@ (80010a8 <display7SEG+0x39c>)
 8000f0e:	f001 f952 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET); //c
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f18:	4863      	ldr	r0, [pc, #396]	@ (80010a8 <display7SEG+0x39c>)
 8000f1a:	f001 f94c 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET); //d
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f24:	4860      	ldr	r0, [pc, #384]	@ (80010a8 <display7SEG+0x39c>)
 8000f26:	f001 f946 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET); //e
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f30:	485d      	ldr	r0, [pc, #372]	@ (80010a8 <display7SEG+0x39c>)
 8000f32:	f001 f940 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET); //f
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f3c:	485a      	ldr	r0, [pc, #360]	@ (80010a8 <display7SEG+0x39c>)
 8000f3e:	f001 f93a 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET); //g
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f48:	4857      	ldr	r0, [pc, #348]	@ (80010a8 <display7SEG+0x39c>)
 8000f4a:	f001 f934 	bl	80021b6 <HAL_GPIO_WritePin>
		break;
 8000f4e:	e0d8      	b.n	8001102 <display7SEG+0x3f6>
	case 6:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET); //a
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f56:	4854      	ldr	r0, [pc, #336]	@ (80010a8 <display7SEG+0x39c>)
 8000f58:	f001 f92d 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET); //b
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f62:	4851      	ldr	r0, [pc, #324]	@ (80010a8 <display7SEG+0x39c>)
 8000f64:	f001 f927 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET); //c
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f6e:	484e      	ldr	r0, [pc, #312]	@ (80010a8 <display7SEG+0x39c>)
 8000f70:	f001 f921 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET); //d
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f7a:	484b      	ldr	r0, [pc, #300]	@ (80010a8 <display7SEG+0x39c>)
 8000f7c:	f001 f91b 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET); //e
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f86:	4848      	ldr	r0, [pc, #288]	@ (80010a8 <display7SEG+0x39c>)
 8000f88:	f001 f915 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET); //f
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f92:	4845      	ldr	r0, [pc, #276]	@ (80010a8 <display7SEG+0x39c>)
 8000f94:	f001 f90f 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET); //g
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f9e:	4842      	ldr	r0, [pc, #264]	@ (80010a8 <display7SEG+0x39c>)
 8000fa0:	f001 f909 	bl	80021b6 <HAL_GPIO_WritePin>
		break;
 8000fa4:	e0ad      	b.n	8001102 <display7SEG+0x3f6>
	case 7:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET); //a
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fac:	483e      	ldr	r0, [pc, #248]	@ (80010a8 <display7SEG+0x39c>)
 8000fae:	f001 f902 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET); //b
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fb8:	483b      	ldr	r0, [pc, #236]	@ (80010a8 <display7SEG+0x39c>)
 8000fba:	f001 f8fc 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET); //c
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fc4:	4838      	ldr	r0, [pc, #224]	@ (80010a8 <display7SEG+0x39c>)
 8000fc6:	f001 f8f6 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET); //d
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fd0:	4835      	ldr	r0, [pc, #212]	@ (80010a8 <display7SEG+0x39c>)
 8000fd2:	f001 f8f0 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET); //e
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fdc:	4832      	ldr	r0, [pc, #200]	@ (80010a8 <display7SEG+0x39c>)
 8000fde:	f001 f8ea 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET); //f
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fe8:	482f      	ldr	r0, [pc, #188]	@ (80010a8 <display7SEG+0x39c>)
 8000fea:	f001 f8e4 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET); //g
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ff4:	482c      	ldr	r0, [pc, #176]	@ (80010a8 <display7SEG+0x39c>)
 8000ff6:	f001 f8de 	bl	80021b6 <HAL_GPIO_WritePin>
		break;
 8000ffa:	e082      	b.n	8001102 <display7SEG+0x3f6>
	case 8:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET); //a
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001002:	4829      	ldr	r0, [pc, #164]	@ (80010a8 <display7SEG+0x39c>)
 8001004:	f001 f8d7 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET); //b
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800100e:	4826      	ldr	r0, [pc, #152]	@ (80010a8 <display7SEG+0x39c>)
 8001010:	f001 f8d1 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET); //c
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800101a:	4823      	ldr	r0, [pc, #140]	@ (80010a8 <display7SEG+0x39c>)
 800101c:	f001 f8cb 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET); //d
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001026:	4820      	ldr	r0, [pc, #128]	@ (80010a8 <display7SEG+0x39c>)
 8001028:	f001 f8c5 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET); //e
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001032:	481d      	ldr	r0, [pc, #116]	@ (80010a8 <display7SEG+0x39c>)
 8001034:	f001 f8bf 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET); //f
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800103e:	481a      	ldr	r0, [pc, #104]	@ (80010a8 <display7SEG+0x39c>)
 8001040:	f001 f8b9 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET); //g
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800104a:	4817      	ldr	r0, [pc, #92]	@ (80010a8 <display7SEG+0x39c>)
 800104c:	f001 f8b3 	bl	80021b6 <HAL_GPIO_WritePin>
		break;
 8001050:	e057      	b.n	8001102 <display7SEG+0x3f6>
	case 9:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET); //a
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001058:	4813      	ldr	r0, [pc, #76]	@ (80010a8 <display7SEG+0x39c>)
 800105a:	f001 f8ac 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET); //b
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001064:	4810      	ldr	r0, [pc, #64]	@ (80010a8 <display7SEG+0x39c>)
 8001066:	f001 f8a6 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET); //c
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001070:	480d      	ldr	r0, [pc, #52]	@ (80010a8 <display7SEG+0x39c>)
 8001072:	f001 f8a0 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET); //d
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800107c:	480a      	ldr	r0, [pc, #40]	@ (80010a8 <display7SEG+0x39c>)
 800107e:	f001 f89a 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET); //e
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001088:	4807      	ldr	r0, [pc, #28]	@ (80010a8 <display7SEG+0x39c>)
 800108a:	f001 f894 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET); //f
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001094:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <display7SEG+0x39c>)
 8001096:	f001 f88e 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET); //g
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010a0:	4801      	ldr	r0, [pc, #4]	@ (80010a8 <display7SEG+0x39c>)
 80010a2:	f001 f888 	bl	80021b6 <HAL_GPIO_WritePin>
		break;
 80010a6:	e02c      	b.n	8001102 <display7SEG+0x3f6>
 80010a8:	40010c00 	.word	0x40010c00

	default:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET); //a
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010b2:	4816      	ldr	r0, [pc, #88]	@ (800110c <display7SEG+0x400>)
 80010b4:	f001 f87f 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET); //b
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010be:	4813      	ldr	r0, [pc, #76]	@ (800110c <display7SEG+0x400>)
 80010c0:	f001 f879 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET); //c
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010ca:	4810      	ldr	r0, [pc, #64]	@ (800110c <display7SEG+0x400>)
 80010cc:	f001 f873 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET); //d
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010d6:	480d      	ldr	r0, [pc, #52]	@ (800110c <display7SEG+0x400>)
 80010d8:	f001 f86d 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET); //e
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010e2:	480a      	ldr	r0, [pc, #40]	@ (800110c <display7SEG+0x400>)
 80010e4:	f001 f867 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET); //f
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ee:	4807      	ldr	r0, [pc, #28]	@ (800110c <display7SEG+0x400>)
 80010f0:	f001 f861 	bl	80021b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET); //g
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010fa:	4804      	ldr	r0, [pc, #16]	@ (800110c <display7SEG+0x400>)
 80010fc:	f001 f85b 	bl	80021b6 <HAL_GPIO_WritePin>
		break;
 8001100:	bf00      	nop
	}

}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40010c00 	.word	0x40010c00

08001110 <update7SEG>:
void update7SEG(int index){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	switch (index){
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b03      	cmp	r3, #3
 800111c:	d85e      	bhi.n	80011dc <update7SEG+0xcc>
 800111e:	a201      	add	r2, pc, #4	@ (adr r2, 8001124 <update7SEG+0x14>)
 8001120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001124:	08001135 	.word	0x08001135
 8001128:	0800115f 	.word	0x0800115f
 800112c:	08001189 	.word	0x08001189
 8001130:	080011b3 	.word	0x080011b3
	 	 case 0:
	 //Display the first 7SEG with led_buffer[0]
	 		 HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,SET);
 8001134:	2201      	movs	r2, #1
 8001136:	2101      	movs	r1, #1
 8001138:	482e      	ldr	r0, [pc, #184]	@ (80011f4 <update7SEG+0xe4>)
 800113a:	f001 f83c 	bl	80021b6 <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2102      	movs	r1, #2
 8001142:	482c      	ldr	r0, [pc, #176]	@ (80011f4 <update7SEG+0xe4>)
 8001144:	f001 f837 	bl	80021b6 <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2104      	movs	r1, #4
 800114c:	4829      	ldr	r0, [pc, #164]	@ (80011f4 <update7SEG+0xe4>)
 800114e:	f001 f832 	bl	80021b6 <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	2108      	movs	r1, #8
 8001156:	4827      	ldr	r0, [pc, #156]	@ (80011f4 <update7SEG+0xe4>)
 8001158:	f001 f82d 	bl	80021b6 <HAL_GPIO_WritePin>
	 		 break;
 800115c:	e03f      	b.n	80011de <update7SEG+0xce>
	 	 case 1:
	 //Display the second 7SEG with led_buffer[1]
	 		HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2101      	movs	r1, #1
 8001162:	4824      	ldr	r0, [pc, #144]	@ (80011f4 <update7SEG+0xe4>)
 8001164:	f001 f827 	bl	80021b6 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,SET);
 8001168:	2201      	movs	r2, #1
 800116a:	2102      	movs	r1, #2
 800116c:	4821      	ldr	r0, [pc, #132]	@ (80011f4 <update7SEG+0xe4>)
 800116e:	f001 f822 	bl	80021b6 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2104      	movs	r1, #4
 8001176:	481f      	ldr	r0, [pc, #124]	@ (80011f4 <update7SEG+0xe4>)
 8001178:	f001 f81d 	bl	80021b6 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2108      	movs	r1, #8
 8001180:	481c      	ldr	r0, [pc, #112]	@ (80011f4 <update7SEG+0xe4>)
 8001182:	f001 f818 	bl	80021b6 <HAL_GPIO_WritePin>

	 		 break;
 8001186:	e02a      	b.n	80011de <update7SEG+0xce>
	 	 case 2:
	 //Display the third 7SEG with led_buffer[2]
	 		HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2101      	movs	r1, #1
 800118c:	4819      	ldr	r0, [pc, #100]	@ (80011f4 <update7SEG+0xe4>)
 800118e:	f001 f812 	bl	80021b6 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2102      	movs	r1, #2
 8001196:	4817      	ldr	r0, [pc, #92]	@ (80011f4 <update7SEG+0xe4>)
 8001198:	f001 f80d 	bl	80021b6 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2104      	movs	r1, #4
 80011a0:	4814      	ldr	r0, [pc, #80]	@ (80011f4 <update7SEG+0xe4>)
 80011a2:	f001 f808 	bl	80021b6 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2108      	movs	r1, #8
 80011aa:	4812      	ldr	r0, [pc, #72]	@ (80011f4 <update7SEG+0xe4>)
 80011ac:	f001 f803 	bl	80021b6 <HAL_GPIO_WritePin>
	 		 break;
 80011b0:	e015      	b.n	80011de <update7SEG+0xce>
	 	 case 3:
	 //Display the forth 7SEG with led_buffer[3]
	 		HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2101      	movs	r1, #1
 80011b6:	480f      	ldr	r0, [pc, #60]	@ (80011f4 <update7SEG+0xe4>)
 80011b8:	f000 fffd 	bl	80021b6 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	2102      	movs	r1, #2
 80011c0:	480c      	ldr	r0, [pc, #48]	@ (80011f4 <update7SEG+0xe4>)
 80011c2:	f000 fff8 	bl	80021b6 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2104      	movs	r1, #4
 80011ca:	480a      	ldr	r0, [pc, #40]	@ (80011f4 <update7SEG+0xe4>)
 80011cc:	f000 fff3 	bl	80021b6 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2108      	movs	r1, #8
 80011d4:	4807      	ldr	r0, [pc, #28]	@ (80011f4 <update7SEG+0xe4>)
 80011d6:	f000 ffee 	bl	80021b6 <HAL_GPIO_WritePin>
	 		 break;
 80011da:	e000      	b.n	80011de <update7SEG+0xce>
	 	 default:
	 		 break;
 80011dc:	bf00      	nop
		}
		display7SEG(led_buffer[index]);
 80011de:	4a06      	ldr	r2, [pc, #24]	@ (80011f8 <update7SEG+0xe8>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fd90 	bl	8000d0c <display7SEG>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40010800 	.word	0x40010800
 80011f8:	20000014 	.word	0x20000014

080011fc <update7SegBuffer>:
void update7SegBuffer(int index,int value){
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
	if(value <= 0){
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	dc05      	bgt.n	8001218 <update7SegBuffer+0x1c>
		led_buffer[index] = 0;
 800120c:	4a07      	ldr	r2, [pc, #28]	@ (800122c <update7SegBuffer+0x30>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2100      	movs	r1, #0
 8001212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else led_buffer[index] = value;
}
 8001216:	e004      	b.n	8001222 <update7SegBuffer+0x26>
	else led_buffer[index] = value;
 8001218:	4904      	ldr	r1, [pc, #16]	@ (800122c <update7SegBuffer+0x30>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	20000014 	.word	0x20000014

08001230 <led_red_and_green>:
 */
#include "main.h"
#include "light_traffic.h"
#include "led7_segment.h"

void led_red_and_green(){
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800123a:	4811      	ldr	r0, [pc, #68]	@ (8001280 <led_red_and_green+0x50>)
 800123c:	f000 ffbb 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001246:	480e      	ldr	r0, [pc, #56]	@ (8001280 <led_red_and_green+0x50>)
 8001248:	f000 ffb5 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 800124c:	2201      	movs	r2, #1
 800124e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001252:	480b      	ldr	r0, [pc, #44]	@ (8001280 <led_red_and_green+0x50>)
 8001254:	f000 ffaf 	bl	80021b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port,LED_YELLOW_2_Pin,RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800125e:	4808      	ldr	r0, [pc, #32]	@ (8001280 <led_red_and_green+0x50>)
 8001260:	f000 ffa9 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8001264:	2201      	movs	r2, #1
 8001266:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800126a:	4805      	ldr	r0, [pc, #20]	@ (8001280 <led_red_and_green+0x50>)
 800126c:	f000 ffa3 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001276:	4802      	ldr	r0, [pc, #8]	@ (8001280 <led_red_and_green+0x50>)
 8001278:	f000 ff9d 	bl	80021b6 <HAL_GPIO_WritePin>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40010800 	.word	0x40010800

08001284 <led_red_and_yellow>:
void led_red_and_yellow(){
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800128e:	4811      	ldr	r0, [pc, #68]	@ (80012d4 <led_red_and_yellow+0x50>)
 8001290:	f000 ff91 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800129a:	480e      	ldr	r0, [pc, #56]	@ (80012d4 <led_red_and_yellow+0x50>)
 800129c:	f000 ff8b 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012a6:	480b      	ldr	r0, [pc, #44]	@ (80012d4 <led_red_and_yellow+0x50>)
 80012a8:	f000 ff85 	bl	80021b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port,LED_YELLOW_2_Pin,SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012b2:	4808      	ldr	r0, [pc, #32]	@ (80012d4 <led_red_and_yellow+0x50>)
 80012b4:	f000 ff7f 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin,RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012be:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <led_red_and_yellow+0x50>)
 80012c0:	f000 ff79 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012ca:	4802      	ldr	r0, [pc, #8]	@ (80012d4 <led_red_and_yellow+0x50>)
 80012cc:	f000 ff73 	bl	80021b6 <HAL_GPIO_WritePin>
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40010800 	.word	0x40010800

080012d8 <led_green_and_red>:
void led_green_and_red(){
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012e2:	4811      	ldr	r0, [pc, #68]	@ (8001328 <led_green_and_red+0x50>)
 80012e4:	f000 ff67 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012ee:	480e      	ldr	r0, [pc, #56]	@ (8001328 <led_green_and_red+0x50>)
 80012f0:	f000 ff61 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012fa:	480b      	ldr	r0, [pc, #44]	@ (8001328 <led_green_and_red+0x50>)
 80012fc:	f000 ff5b 	bl	80021b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port,LED_YELLOW_2_Pin,RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001306:	4808      	ldr	r0, [pc, #32]	@ (8001328 <led_green_and_red+0x50>)
 8001308:	f000 ff55 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin,RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <led_green_and_red+0x50>)
 8001314:	f000 ff4f 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8001318:	2201      	movs	r2, #1
 800131a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800131e:	4802      	ldr	r0, [pc, #8]	@ (8001328 <led_green_and_red+0x50>)
 8001320:	f000 ff49 	bl	80021b6 <HAL_GPIO_WritePin>
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40010800 	.word	0x40010800

0800132c <led_yellow_and_red>:
void led_yellow_and_red(){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,SET);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001336:	4811      	ldr	r0, [pc, #68]	@ (800137c <led_yellow_and_red+0x50>)
 8001338:	f000 ff3d 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001342:	480e      	ldr	r0, [pc, #56]	@ (800137c <led_yellow_and_red+0x50>)
 8001344:	f000 ff37 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800134e:	480b      	ldr	r0, [pc, #44]	@ (800137c <led_yellow_and_red+0x50>)
 8001350:	f000 ff31 	bl	80021b6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port,LED_YELLOW_2_Pin,RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800135a:	4808      	ldr	r0, [pc, #32]	@ (800137c <led_yellow_and_red+0x50>)
 800135c:	f000 ff2b 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001366:	4805      	ldr	r0, [pc, #20]	@ (800137c <led_yellow_and_red+0x50>)
 8001368:	f000 ff25 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 800136c:	2201      	movs	r2, #1
 800136e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001372:	4802      	ldr	r0, [pc, #8]	@ (800137c <led_yellow_and_red+0x50>)
 8001374:	f000 ff1f 	bl	80021b6 <HAL_GPIO_WritePin>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40010800 	.word	0x40010800

08001380 <all_led_red_on>:
void all_led_red_on(){
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin,SET);
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800138a:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <all_led_red_on+0x20>)
 800138c:	f000 ff13 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,SET);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001396:	4802      	ldr	r0, [pc, #8]	@ (80013a0 <all_led_red_on+0x20>)
 8001398:	f000 ff0d 	bl	80021b6 <HAL_GPIO_WritePin>
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40010800 	.word	0x40010800

080013a4 <all_led_red_off>:
void all_led_red_off(){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin,RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013ae:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <all_led_red_off+0x20>)
 80013b0:	f000 ff01 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin,RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013ba:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <all_led_red_off+0x20>)
 80013bc:	f000 fefb 	bl	80021b6 <HAL_GPIO_WritePin>
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40010800 	.word	0x40010800

080013c8 <all_led_yellow_on>:
void all_led_yellow_on(){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin,SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013d2:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <all_led_yellow_on+0x20>)
 80013d4:	f000 feef 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin,SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013de:	4802      	ldr	r0, [pc, #8]	@ (80013e8 <all_led_yellow_on+0x20>)
 80013e0:	f000 fee9 	bl	80021b6 <HAL_GPIO_WritePin>
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40010800 	.word	0x40010800

080013ec <all_led_yellow_off>:
void all_led_yellow_off(){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin,RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <all_led_yellow_off+0x20>)
 80013f8:	f000 fedd 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin,RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001402:	4802      	ldr	r0, [pc, #8]	@ (800140c <all_led_yellow_off+0x20>)
 8001404:	f000 fed7 	bl	80021b6 <HAL_GPIO_WritePin>
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40010800 	.word	0x40010800

08001410 <all_led_green_on>:
void all_led_green_on(){
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin,SET);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <all_led_green_on+0x20>)
 800141c:	f000 fecb 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,SET);
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001426:	4802      	ldr	r0, [pc, #8]	@ (8001430 <all_led_green_on+0x20>)
 8001428:	f000 fec5 	bl	80021b6 <HAL_GPIO_WritePin>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40010800 	.word	0x40010800

08001434 <all_led_green_off>:
void all_led_green_off(){
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin,RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800143e:	4805      	ldr	r0, [pc, #20]	@ (8001454 <all_led_green_off+0x20>)
 8001440:	f000 feb9 	bl	80021b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin,RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800144a:	4802      	ldr	r0, [pc, #8]	@ (8001454 <all_led_green_off+0x20>)
 800144c:	f000 feb3 	bl	80021b6 <HAL_GPIO_WritePin>
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40010800 	.word	0x40010800

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145c:	f000 fba8 	bl	8001bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001460:	f000 f81e 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001464:	f000 f8a4 	bl	80015b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001468:	f000 f856 	bl	8001518 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
 // setTimer(0,1000);	unit test led
  System_Initialization();
 800146c:	f000 fb18 	bl	8001aa0 <System_Initialization>
// HAL_TIM_Base_Start_IT(&htim2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(fsm_autorun, 5,1);
 8001470:	2201      	movs	r2, #1
 8001472:	2105      	movs	r1, #5
 8001474:	4807      	ldr	r0, [pc, #28]	@ (8001494 <main+0x3c>)
 8001476:	f000 f9b3 	bl	80017e0 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual, 10,1);
 800147a:	2201      	movs	r2, #1
 800147c:	210a      	movs	r1, #10
 800147e:	4806      	ldr	r0, [pc, #24]	@ (8001498 <main+0x40>)
 8001480:	f000 f9ae 	bl	80017e0 <SCH_Add_Task>
  SCH_Add_Task(fsm_setting, 20,1);
 8001484:	2201      	movs	r2, #1
 8001486:	2114      	movs	r1, #20
 8001488:	4804      	ldr	r0, [pc, #16]	@ (800149c <main+0x44>)
 800148a:	f000 f9a9 	bl	80017e0 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 800148e:	f000 f9f3 	bl	8001878 <SCH_Dispatch_Tasks>
 8001492:	e7fc      	b.n	800148e <main+0x36>
 8001494:	080002f5 	.word	0x080002f5
 8001498:	080006ed 	.word	0x080006ed
 800149c:	080007f1 	.word	0x080007f1

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b090      	sub	sp, #64	@ 0x40
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0318 	add.w	r3, r7, #24
 80014aa:	2228      	movs	r2, #40	@ 0x28
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 fe6c 	bl	800318c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c6:	2301      	movs	r3, #1
 80014c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ca:	2310      	movs	r3, #16
 80014cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d2:	f107 0318 	add.w	r3, r7, #24
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fe9e 	bl	8002218 <HAL_RCC_OscConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014e2:	f000 f8d5 	bl	8001690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e6:	230f      	movs	r3, #15
 80014e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 f90c 	bl	800271c <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800150a:	f000 f8c1 	bl	8001690 <Error_Handler>
  }
}
 800150e:	bf00      	nop
 8001510:	3740      	adds	r7, #64	@ 0x40
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152c:	463b      	mov	r3, r7
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001534:	4b1d      	ldr	r3, [pc, #116]	@ (80015ac <MX_TIM2_Init+0x94>)
 8001536:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800153a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <MX_TIM2_Init+0x94>)
 800153e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001542:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001544:	4b19      	ldr	r3, [pc, #100]	@ (80015ac <MX_TIM2_Init+0x94>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800154a:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <MX_TIM2_Init+0x94>)
 800154c:	2209      	movs	r2, #9
 800154e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001550:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <MX_TIM2_Init+0x94>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b15      	ldr	r3, [pc, #84]	@ (80015ac <MX_TIM2_Init+0x94>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800155c:	4813      	ldr	r0, [pc, #76]	@ (80015ac <MX_TIM2_Init+0x94>)
 800155e:	f001 fa39 	bl	80029d4 <HAL_TIM_Base_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001568:	f000 f892 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001570:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	4619      	mov	r1, r3
 8001578:	480c      	ldr	r0, [pc, #48]	@ (80015ac <MX_TIM2_Init+0x94>)
 800157a:	f001 fbb7 	bl	8002cec <HAL_TIM_ConfigClockSource>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001584:	f000 f884 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001590:	463b      	mov	r3, r7
 8001592:	4619      	mov	r1, r3
 8001594:	4805      	ldr	r0, [pc, #20]	@ (80015ac <MX_TIM2_Init+0x94>)
 8001596:	f001 fd8f 	bl	80030b8 <HAL_TIMEx_MasterConfigSynchronization>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015a0:	f000 f876 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200000fc 	.word	0x200000fc

080015b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <MX_GPIO_Init+0xb8>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a27      	ldr	r2, [pc, #156]	@ (8001668 <MX_GPIO_Init+0xb8>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b25      	ldr	r3, [pc, #148]	@ (8001668 <MX_GPIO_Init+0xb8>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015dc:	4b22      	ldr	r3, [pc, #136]	@ (8001668 <MX_GPIO_Init+0xb8>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a21      	ldr	r2, [pc, #132]	@ (8001668 <MX_GPIO_Init+0xb8>)
 80015e2:	f043 0308 	orr.w	r3, r3, #8
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001668 <MX_GPIO_Init+0xb8>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80015f4:	2200      	movs	r2, #0
 80015f6:	f64f 41ff 	movw	r1, #64767	@ 0xfcff
 80015fa:	481c      	ldr	r0, [pc, #112]	@ (800166c <MX_GPIO_Init+0xbc>)
 80015fc:	f000 fddb 	bl	80021b6 <HAL_GPIO_WritePin>
                          |EN4_Pin|EN5_Pin|EN6_Pin|EN7_Pin
                          |LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_2_Pin
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001606:	481a      	ldr	r0, [pc, #104]	@ (8001670 <MX_GPIO_Init+0xc0>)
 8001608:	f000 fdd5 	bl	80021b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           EN4_Pin EN5_Pin EN6_Pin EN7_Pin
                           LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800160c:	f64f 43ff 	movw	r3, #64767	@ 0xfcff
 8001610:	60bb      	str	r3, [r7, #8]
                          |EN4_Pin|EN5_Pin|EN6_Pin|EN7_Pin
                          |LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_2_Pin
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2302      	movs	r3, #2
 800161c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	4619      	mov	r1, r3
 8001624:	4811      	ldr	r0, [pc, #68]	@ (800166c <MX_GPIO_Init+0xbc>)
 8001626:	f000 fc33 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin LED_Pin SEG0_Pin SEG1_Pin */
  GPIO_InitStruct.Pin = SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
 800162a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800162e:	60bb      	str	r3, [r7, #8]
                          |SEG6_Pin|LED_Pin|SEG0_Pin|SEG1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2302      	movs	r3, #2
 800163a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	4619      	mov	r1, r3
 8001642:	480b      	ldr	r0, [pc, #44]	@ (8001670 <MX_GPIO_Init+0xc0>)
 8001644:	f000 fc24 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON3_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON3_Pin|BUTTON2_Pin;
 8001648:	2338      	movs	r3, #56	@ 0x38
 800164a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001650:	2301      	movs	r3, #1
 8001652:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	4619      	mov	r1, r3
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_GPIO_Init+0xc0>)
 800165c:	f000 fc18 	bl	8001e90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001660:	bf00      	nop
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021000 	.word	0x40021000
 800166c:	40010800 	.word	0x40010800
 8001670:	40010c00 	.word	0x40010c00

08001674 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	timerRun();
 800167c:	f000 fa42 	bl	8001b04 <timerRun>
	SCH_Update();
 8001680:	f000 f80c 	bl	800169c <SCH_Update>
	getKeyInput();
 8001684:	f7fe fd7c 	bl	8000180 <getKeyInput>
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <Error_Handler+0x8>

0800169c <SCH_Update>:
 *      Author: ADMIN
 */

#include "scheduler.h"
struct sTask SCH_tasks_G[SCH_MAX_TASKS];
void SCH_Update(void){
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
	unsigned char Index;
	 // NOTE: calculations are in *TICKS* (not milliseconds)
	 for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 80016a2:	2300      	movs	r3, #0
 80016a4:	71fb      	strb	r3, [r7, #7]
 80016a6:	e052      	b.n	800174e <SCH_Update+0xb2>
	 // Check if there is a task at this location
		 if (SCH_tasks_G[Index ]. pTask) {
 80016a8:	79fa      	ldrb	r2, [r7, #7]
 80016aa:	492d      	ldr	r1, [pc, #180]	@ (8001760 <SCH_Update+0xc4>)
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d045      	beq.n	8001748 <SCH_Update+0xac>
			 if (SCH_tasks_G[Index ]. Delay == 0){
 80016bc:	79fa      	ldrb	r2, [r7, #7]
 80016be:	4928      	ldr	r1, [pc, #160]	@ (8001760 <SCH_Update+0xc4>)
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	3304      	adds	r3, #4
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d127      	bne.n	8001722 <SCH_Update+0x86>
				 SCH_tasks_G[Index ].RunMe += 1;
 80016d2:	79fa      	ldrb	r2, [r7, #7]
 80016d4:	4922      	ldr	r1, [pc, #136]	@ (8001760 <SCH_Update+0xc4>)
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	330c      	adds	r3, #12
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	79fa      	ldrb	r2, [r7, #7]
 80016e6:	3301      	adds	r3, #1
 80016e8:	b2d8      	uxtb	r0, r3
 80016ea:	491d      	ldr	r1, [pc, #116]	@ (8001760 <SCH_Update+0xc4>)
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	330c      	adds	r3, #12
 80016f8:	4602      	mov	r2, r0
 80016fa:	701a      	strb	r2, [r3, #0]
				 SCH_tasks_G[Index ]. Delay = SCH_tasks_G[Index ].Period ;
 80016fc:	79f9      	ldrb	r1, [r7, #7]
 80016fe:	79fa      	ldrb	r2, [r7, #7]
 8001700:	4817      	ldr	r0, [pc, #92]	@ (8001760 <SCH_Update+0xc4>)
 8001702:	460b      	mov	r3, r1
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	440b      	add	r3, r1
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4403      	add	r3, r0
 800170c:	3308      	adds	r3, #8
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	4813      	ldr	r0, [pc, #76]	@ (8001760 <SCH_Update+0xc4>)
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4403      	add	r3, r0
 800171c:	3304      	adds	r3, #4
 800171e:	6019      	str	r1, [r3, #0]
 8001720:	e012      	b.n	8001748 <SCH_Update+0xac>
			 }
			 else{
				 SCH_tasks_G[Index ]. Delay-=1;
 8001722:	79fa      	ldrb	r2, [r7, #7]
 8001724:	490e      	ldr	r1, [pc, #56]	@ (8001760 <SCH_Update+0xc4>)
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	440b      	add	r3, r1
 8001730:	3304      	adds	r3, #4
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	79fa      	ldrb	r2, [r7, #7]
 8001736:	1e59      	subs	r1, r3, #1
 8001738:	4809      	ldr	r0, [pc, #36]	@ (8001760 <SCH_Update+0xc4>)
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4403      	add	r3, r0
 8001744:	3304      	adds	r3, #4
 8001746:	6019      	str	r1, [r3, #0]
	 for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	3301      	adds	r3, #1
 800174c:	71fb      	strb	r3, [r7, #7]
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b27      	cmp	r3, #39	@ 0x27
 8001752:	d9a9      	bls.n	80016a8 <SCH_Update+0xc>

		 }
	 }
	 // The task is due to run
	 // Inc. the ’RunMe’ flag
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	20000144 	.word	0x20000144

08001764 <SCH_Delete_Task>:
void SCH_Delete_Task(uint32_t taskID){
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	 if(SCH_tasks_G[taskID]. pTask == 0) {
 800176c:	491b      	ldr	r1, [pc, #108]	@ (80017dc <SCH_Delete_Task+0x78>)
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d027      	beq.n	80017d0 <SCH_Delete_Task+0x6c>
		 return;
	 }
	 SCH_tasks_G[taskID]. pTask = 0;
 8001780:	4916      	ldr	r1, [pc, #88]	@ (80017dc <SCH_Delete_Task+0x78>)
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[taskID]. Delay = 0;
 8001792:	4912      	ldr	r1, [pc, #72]	@ (80017dc <SCH_Delete_Task+0x78>)
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	3304      	adds	r3, #4
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[taskID]. Period = 0;
 80017a6:	490d      	ldr	r1, [pc, #52]	@ (80017dc <SCH_Delete_Task+0x78>)
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	3308      	adds	r3, #8
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[taskID]. RunMe = 0;
 80017ba:	4908      	ldr	r1, [pc, #32]	@ (80017dc <SCH_Delete_Task+0x78>)
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	440b      	add	r3, r1
 80017c8:	330c      	adds	r3, #12
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	e000      	b.n	80017d2 <SCH_Delete_Task+0x6e>
		 return;
 80017d0:	bf00      	nop
}
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000144 	.word	0x20000144

080017e0 <SCH_Add_Task>:
void SCH_Add_Task(void (*pFunction)() , unsigned int DELAY, unsigned int PERIOD){
 80017e0:	b480      	push	{r7}
 80017e2:	b087      	sub	sp, #28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	75fb      	strb	r3, [r7, #23]
	// First find a gap in the array ( if there is one)
	while ((SCH_tasks_G[Index].pTask != 0) && (Index <SCH_MAX_TASKS))
 80017f0:	e002      	b.n	80017f8 <SCH_Add_Task+0x18>
	 {
		Index++;
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	3301      	adds	r3, #1
 80017f6:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index <SCH_MAX_TASKS))
 80017f8:	7dfa      	ldrb	r2, [r7, #23]
 80017fa:	491e      	ldr	r1, [pc, #120]	@ (8001874 <SCH_Add_Task+0x94>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <SCH_Add_Task+0x32>
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	2b27      	cmp	r3, #39	@ 0x27
 8001810:	d9ef      	bls.n	80017f2 <SCH_Add_Task+0x12>
	 }
	 // Havewe reached the end of the list?
	 if (Index == SCH_MAX_TASKS){
 8001812:	7dfb      	ldrb	r3, [r7, #23]
 8001814:	2b28      	cmp	r3, #40	@ 0x28
 8001816:	d027      	beq.n	8001868 <SCH_Add_Task+0x88>
		 // Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
		 // Also return an error code
		 return;
	 }
	  // If we’re here, there is a space in the task array
	 SCH_tasks_G[Index].pTask = pFunction;
 8001818:	7dfa      	ldrb	r2, [r7, #23]
 800181a:	4916      	ldr	r1, [pc, #88]	@ (8001874 <SCH_Add_Task+0x94>)
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[Index].Delay =DELAY;
 800182a:	7dfa      	ldrb	r2, [r7, #23]
 800182c:	4911      	ldr	r1, [pc, #68]	@ (8001874 <SCH_Add_Task+0x94>)
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	3304      	adds	r3, #4
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[Index].Period = PERIOD;
 800183e:	7dfa      	ldrb	r2, [r7, #23]
 8001840:	490c      	ldr	r1, [pc, #48]	@ (8001874 <SCH_Add_Task+0x94>)
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	440b      	add	r3, r1
 800184c:	3308      	adds	r3, #8
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	601a      	str	r2, [r3, #0]
	 SCH_tasks_G[Index].RunMe = 0;
 8001852:	7dfa      	ldrb	r2, [r7, #23]
 8001854:	4907      	ldr	r1, [pc, #28]	@ (8001874 <SCH_Add_Task+0x94>)
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	330c      	adds	r3, #12
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
	 // return position of task (to allow later deletion)
	 return;
 8001866:	e000      	b.n	800186a <SCH_Add_Task+0x8a>
		 return;
 8001868:	bf00      	nop
}
 800186a:	371c      	adds	r7, #28
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000144 	.word	0x20000144

08001878 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void){
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
	unsigned char Index;
	 // Dispatches (runs) the next task ( if one is ready)
	 for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 800187e:	2300      	movs	r3, #0
 8001880:	71fb      	strb	r3, [r7, #7]
 8001882:	e03a      	b.n	80018fa <SCH_Dispatch_Tasks+0x82>
		 if (SCH_tasks_G[Index].RunMe > 0) {
 8001884:	79fa      	ldrb	r2, [r7, #7]
 8001886:	4921      	ldr	r1, [pc, #132]	@ (800190c <SCH_Dispatch_Tasks+0x94>)
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	330c      	adds	r3, #12
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d02c      	beq.n	80018f4 <SCH_Dispatch_Tasks+0x7c>
		 	 (*SCH_tasks_G[Index].pTask)() ;
 800189a:	79fa      	ldrb	r2, [r7, #7]
 800189c:	491b      	ldr	r1, [pc, #108]	@ (800190c <SCH_Dispatch_Tasks+0x94>)
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4798      	blx	r3
		 	 SCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe
 80018ac:	79fa      	ldrb	r2, [r7, #7]
 80018ae:	4917      	ldr	r1, [pc, #92]	@ (800190c <SCH_Dispatch_Tasks+0x94>)
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	330c      	adds	r3, #12
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	79fa      	ldrb	r2, [r7, #7]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b2d8      	uxtb	r0, r3
 80018c4:	4911      	ldr	r1, [pc, #68]	@ (800190c <SCH_Dispatch_Tasks+0x94>)
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	330c      	adds	r3, #12
 80018d2:	4602      	mov	r2, r0
 80018d4:	701a      	strb	r2, [r3, #0]
		 	 // Periodic tasks will automatically run again
		 	 // − if this is a ’one shot’ task , remove it from the
		 	 if(SCH_tasks_G[Index]. Period == 0){
 80018d6:	79fa      	ldrb	r2, [r7, #7]
 80018d8:	490c      	ldr	r1, [pc, #48]	@ (800190c <SCH_Dispatch_Tasks+0x94>)
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	3308      	adds	r3, #8
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d103      	bne.n	80018f4 <SCH_Dispatch_Tasks+0x7c>
		 		 SCH_Delete_Task(Index) ;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff38 	bl	8001764 <SCH_Delete_Task>
	 for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	3301      	adds	r3, #1
 80018f8:	71fb      	strb	r3, [r7, #7]
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b27      	cmp	r3, #39	@ 0x27
 80018fe:	d9c1      	bls.n	8001884 <SCH_Dispatch_Tasks+0xc>
		 	 }
	 	 }
	 }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000144 	.word	0x20000144

08001910 <SCH_Init>:
void SCH_Init(){
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
	 unsigned char Index ;
	 for(Index=0; Index < SCH_MAX_TASKS; Index++) {
 8001916:	2300      	movs	r3, #0
 8001918:	71fb      	strb	r3, [r7, #7]
 800191a:	e029      	b.n	8001970 <SCH_Init+0x60>
		 SCH_tasks_G[Index].pTask = 0;
 800191c:	79fa      	ldrb	r2, [r7, #7]
 800191e:	4919      	ldr	r1, [pc, #100]	@ (8001984 <SCH_Init+0x74>)
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
		 SCH_tasks_G[Index].Delay = 0;
 800192e:	79fa      	ldrb	r2, [r7, #7]
 8001930:	4914      	ldr	r1, [pc, #80]	@ (8001984 <SCH_Init+0x74>)
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	3304      	adds	r3, #4
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
		 SCH_tasks_G[Index].Period = 0;
 8001942:	79fa      	ldrb	r2, [r7, #7]
 8001944:	490f      	ldr	r1, [pc, #60]	@ (8001984 <SCH_Init+0x74>)
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	3308      	adds	r3, #8
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
		 SCH_tasks_G[Index].RunMe = 0;
 8001956:	79fa      	ldrb	r2, [r7, #7]
 8001958:	490a      	ldr	r1, [pc, #40]	@ (8001984 <SCH_Init+0x74>)
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	330c      	adds	r3, #12
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
	 for(Index=0; Index < SCH_MAX_TASKS; Index++) {
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	3301      	adds	r3, #1
 800196e:	71fb      	strb	r3, [r7, #7]
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	2b27      	cmp	r3, #39	@ 0x27
 8001974:	d9d2      	bls.n	800191c <SCH_Init+0xc>
	 }
}
 8001976:	bf00      	nop
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000144 	.word	0x20000144

08001988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <HAL_MspInit+0x5c>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	4a14      	ldr	r2, [pc, #80]	@ (80019e4 <HAL_MspInit+0x5c>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6193      	str	r3, [r2, #24]
 800199a:	4b12      	ldr	r3, [pc, #72]	@ (80019e4 <HAL_MspInit+0x5c>)
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	4b0f      	ldr	r3, [pc, #60]	@ (80019e4 <HAL_MspInit+0x5c>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	4a0e      	ldr	r2, [pc, #56]	@ (80019e4 <HAL_MspInit+0x5c>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b0:	61d3      	str	r3, [r2, #28]
 80019b2:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <HAL_MspInit+0x5c>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80019be:	4b0a      	ldr	r3, [pc, #40]	@ (80019e8 <HAL_MspInit+0x60>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	4a04      	ldr	r2, [pc, #16]	@ (80019e8 <HAL_MspInit+0x60>)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010000 	.word	0x40010000

080019ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019fc:	d113      	bne.n	8001a26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <HAL_TIM_Base_MspInit+0x44>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a0b      	ldr	r2, [pc, #44]	@ (8001a30 <HAL_TIM_Base_MspInit+0x44>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	61d3      	str	r3, [r2, #28]
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_TIM_Base_MspInit+0x44>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	201c      	movs	r0, #28
 8001a1c:	f000 fa01 	bl	8001e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a20:	201c      	movs	r0, #28
 8001a22:	f000 fa1a 	bl	8001e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <NMI_Handler+0x4>

08001a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <HardFault_Handler+0x4>

08001a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <MemManage_Handler+0x4>

08001a4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <BusFault_Handler+0x4>

08001a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <UsageFault_Handler+0x4>

08001a5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a84:	f000 f8da 	bl	8001c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a90:	4802      	ldr	r0, [pc, #8]	@ (8001a9c <TIM2_IRQHandler+0x10>)
 8001a92:	f001 f83b 	bl	8002b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200000fc 	.word	0x200000fc

08001aa0 <System_Initialization>:
 *      Author: ADMIN
 */


#include "system.h"
void  System_Initialization(){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	SCH_Init();
 8001aa4:	f7ff ff34 	bl	8001910 <SCH_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8001aa8:	4802      	ldr	r0, [pc, #8]	@ (8001ab4 <System_Initialization+0x14>)
 8001aaa:	f000 ffe3 	bl	8002a74 <HAL_TIM_Base_Start_IT>
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200000fc 	.word	0x200000fc

08001ab8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <setTimer>:
 *      Author: ADMIN
 */
#include "timer.h"
int software_timer[10] = {0};
int flag_timer[10] = {0};
void setTimer(int index,int duration){
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
	software_timer[index] = duration/TICK;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	4a09      	ldr	r2, [pc, #36]	@ (8001af8 <setTimer+0x34>)
 8001ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad6:	1092      	asrs	r2, r2, #2
 8001ad8:	17db      	asrs	r3, r3, #31
 8001ada:	1ad2      	subs	r2, r2, r3
 8001adc:	4907      	ldr	r1, [pc, #28]	@ (8001afc <setTimer+0x38>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	flag_timer[index] = 0;
 8001ae4:	4a06      	ldr	r2, [pc, #24]	@ (8001b00 <setTimer+0x3c>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2100      	movs	r1, #0
 8001aea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	66666667 	.word	0x66666667
 8001afc:	20000464 	.word	0x20000464
 8001b00:	2000048c 	.word	0x2000048c

08001b04 <timerRun>:
void timerRun(){
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
	for(int i=0;i<10;i++){
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	e01b      	b.n	8001b48 <timerRun+0x44>
		software_timer[i]--;
 8001b10:	4a12      	ldr	r2, [pc, #72]	@ (8001b5c <timerRun+0x58>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b18:	1e5a      	subs	r2, r3, #1
 8001b1a:	4910      	ldr	r1, [pc, #64]	@ (8001b5c <timerRun+0x58>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(software_timer[i] <= 0){
 8001b22:	4a0e      	ldr	r2, [pc, #56]	@ (8001b5c <timerRun+0x58>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	dc09      	bgt.n	8001b42 <timerRun+0x3e>
			software_timer[i] = 0;
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b5c <timerRun+0x58>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2100      	movs	r1, #0
 8001b34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			flag_timer[i] = 1;
 8001b38:	4a09      	ldr	r2, [pc, #36]	@ (8001b60 <timerRun+0x5c>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<10;i++){
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3301      	adds	r3, #1
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b09      	cmp	r3, #9
 8001b4c:	dde0      	ble.n	8001b10 <timerRun+0xc>
		}
	}
}
 8001b4e:	bf00      	nop
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	20000464 	.word	0x20000464
 8001b60:	2000048c 	.word	0x2000048c

08001b64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b64:	f7ff ffa8 	bl	8001ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b68:	480b      	ldr	r0, [pc, #44]	@ (8001b98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b6a:	490c      	ldr	r1, [pc, #48]	@ (8001b9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b70:	e002      	b.n	8001b78 <LoopCopyDataInit>

08001b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b76:	3304      	adds	r3, #4

08001b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b7c:	d3f9      	bcc.n	8001b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7e:	4a09      	ldr	r2, [pc, #36]	@ (8001ba4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b80:	4c09      	ldr	r4, [pc, #36]	@ (8001ba8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b84:	e001      	b.n	8001b8a <LoopFillZerobss>

08001b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b88:	3204      	adds	r2, #4

08001b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b8c:	d3fb      	bcc.n	8001b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f001 fb05 	bl	800319c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b92:	f7ff fc61 	bl	8001458 <main>
  bx lr
 8001b96:	4770      	bx	lr
  ldr r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b9c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001ba0:	08003228 	.word	0x08003228
  ldr r2, =_sbss
 8001ba4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001ba8:	200004b8 	.word	0x200004b8

08001bac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC1_2_IRQHandler>
	...

08001bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb4:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <HAL_Init+0x28>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a07      	ldr	r2, [pc, #28]	@ (8001bd8 <HAL_Init+0x28>)
 8001bba:	f043 0310 	orr.w	r3, r3, #16
 8001bbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	f000 f923 	bl	8001e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc6:	200f      	movs	r0, #15
 8001bc8:	f000 f808 	bl	8001bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bcc:	f7ff fedc 	bl	8001988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40022000 	.word	0x40022000

08001bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <HAL_InitTick+0x54>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <HAL_InitTick+0x58>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f93b 	bl	8001e76 <HAL_SYSTICK_Config>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00e      	b.n	8001c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b0f      	cmp	r3, #15
 8001c0e:	d80a      	bhi.n	8001c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c10:	2200      	movs	r2, #0
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f000 f903 	bl	8001e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c1c:	4a06      	ldr	r2, [pc, #24]	@ (8001c38 <HAL_InitTick+0x5c>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e000      	b.n	8001c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000024 	.word	0x20000024
 8001c34:	2000002c 	.word	0x2000002c
 8001c38:	20000028 	.word	0x20000028

08001c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_IncTick+0x1c>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <HAL_IncTick+0x20>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a03      	ldr	r2, [pc, #12]	@ (8001c5c <HAL_IncTick+0x20>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	2000002c 	.word	0x2000002c
 8001c5c:	200004b4 	.word	0x200004b4

08001c60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b02      	ldr	r3, [pc, #8]	@ (8001c70 <HAL_GetTick+0x10>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	200004b4 	.word	0x200004b4

08001c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c84:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c90:	4013      	ands	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca6:	4a04      	ldr	r2, [pc, #16]	@ (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	60d3      	str	r3, [r2, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	f003 0307 	and.w	r3, r3, #7
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	db0b      	blt.n	8001d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	f003 021f 	and.w	r2, r3, #31
 8001cf0:	4906      	ldr	r1, [pc, #24]	@ (8001d0c <__NVIC_EnableIRQ+0x34>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	e000e100 	.word	0xe000e100

08001d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	db0a      	blt.n	8001d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	490c      	ldr	r1, [pc, #48]	@ (8001d5c <__NVIC_SetPriority+0x4c>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	0112      	lsls	r2, r2, #4
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	440b      	add	r3, r1
 8001d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d38:	e00a      	b.n	8001d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4908      	ldr	r1, [pc, #32]	@ (8001d60 <__NVIC_SetPriority+0x50>)
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	3b04      	subs	r3, #4
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	761a      	strb	r2, [r3, #24]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f1c3 0307 	rsb	r3, r3, #7
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	bf28      	it	cs
 8001d82:	2304      	movcs	r3, #4
 8001d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d902      	bls.n	8001d94 <NVIC_EncodePriority+0x30>
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3b03      	subs	r3, #3
 8001d92:	e000      	b.n	8001d96 <NVIC_EncodePriority+0x32>
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	401a      	ands	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	43d9      	mvns	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	4313      	orrs	r3, r2
         );
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	@ 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dd8:	d301      	bcc.n	8001dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00f      	b.n	8001dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dde:	4a0a      	ldr	r2, [pc, #40]	@ (8001e08 <SysTick_Config+0x40>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de6:	210f      	movs	r1, #15
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f7ff ff90 	bl	8001d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df0:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <SysTick_Config+0x40>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df6:	4b04      	ldr	r3, [pc, #16]	@ (8001e08 <SysTick_Config+0x40>)
 8001df8:	2207      	movs	r2, #7
 8001dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ff2d 	bl	8001c74 <__NVIC_SetPriorityGrouping>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e34:	f7ff ff42 	bl	8001cbc <__NVIC_GetPriorityGrouping>
 8001e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	6978      	ldr	r0, [r7, #20]
 8001e40:	f7ff ff90 	bl	8001d64 <NVIC_EncodePriority>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff5f 	bl	8001d10 <__NVIC_SetPriority>
}
 8001e52:	bf00      	nop
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff35 	bl	8001cd8 <__NVIC_EnableIRQ>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ffa2 	bl	8001dc8 <SysTick_Config>
 8001e84:	4603      	mov	r3, r0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b08b      	sub	sp, #44	@ 0x2c
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea2:	e161      	b.n	8002168 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	f040 8150 	bne.w	8002162 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4a97      	ldr	r2, [pc, #604]	@ (8002124 <HAL_GPIO_Init+0x294>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d05e      	beq.n	8001f8a <HAL_GPIO_Init+0xfa>
 8001ecc:	4a95      	ldr	r2, [pc, #596]	@ (8002124 <HAL_GPIO_Init+0x294>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d875      	bhi.n	8001fbe <HAL_GPIO_Init+0x12e>
 8001ed2:	4a95      	ldr	r2, [pc, #596]	@ (8002128 <HAL_GPIO_Init+0x298>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d058      	beq.n	8001f8a <HAL_GPIO_Init+0xfa>
 8001ed8:	4a93      	ldr	r2, [pc, #588]	@ (8002128 <HAL_GPIO_Init+0x298>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d86f      	bhi.n	8001fbe <HAL_GPIO_Init+0x12e>
 8001ede:	4a93      	ldr	r2, [pc, #588]	@ (800212c <HAL_GPIO_Init+0x29c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d052      	beq.n	8001f8a <HAL_GPIO_Init+0xfa>
 8001ee4:	4a91      	ldr	r2, [pc, #580]	@ (800212c <HAL_GPIO_Init+0x29c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d869      	bhi.n	8001fbe <HAL_GPIO_Init+0x12e>
 8001eea:	4a91      	ldr	r2, [pc, #580]	@ (8002130 <HAL_GPIO_Init+0x2a0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d04c      	beq.n	8001f8a <HAL_GPIO_Init+0xfa>
 8001ef0:	4a8f      	ldr	r2, [pc, #572]	@ (8002130 <HAL_GPIO_Init+0x2a0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d863      	bhi.n	8001fbe <HAL_GPIO_Init+0x12e>
 8001ef6:	4a8f      	ldr	r2, [pc, #572]	@ (8002134 <HAL_GPIO_Init+0x2a4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d046      	beq.n	8001f8a <HAL_GPIO_Init+0xfa>
 8001efc:	4a8d      	ldr	r2, [pc, #564]	@ (8002134 <HAL_GPIO_Init+0x2a4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d85d      	bhi.n	8001fbe <HAL_GPIO_Init+0x12e>
 8001f02:	2b12      	cmp	r3, #18
 8001f04:	d82a      	bhi.n	8001f5c <HAL_GPIO_Init+0xcc>
 8001f06:	2b12      	cmp	r3, #18
 8001f08:	d859      	bhi.n	8001fbe <HAL_GPIO_Init+0x12e>
 8001f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f10 <HAL_GPIO_Init+0x80>)
 8001f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f10:	08001f8b 	.word	0x08001f8b
 8001f14:	08001f65 	.word	0x08001f65
 8001f18:	08001f77 	.word	0x08001f77
 8001f1c:	08001fb9 	.word	0x08001fb9
 8001f20:	08001fbf 	.word	0x08001fbf
 8001f24:	08001fbf 	.word	0x08001fbf
 8001f28:	08001fbf 	.word	0x08001fbf
 8001f2c:	08001fbf 	.word	0x08001fbf
 8001f30:	08001fbf 	.word	0x08001fbf
 8001f34:	08001fbf 	.word	0x08001fbf
 8001f38:	08001fbf 	.word	0x08001fbf
 8001f3c:	08001fbf 	.word	0x08001fbf
 8001f40:	08001fbf 	.word	0x08001fbf
 8001f44:	08001fbf 	.word	0x08001fbf
 8001f48:	08001fbf 	.word	0x08001fbf
 8001f4c:	08001fbf 	.word	0x08001fbf
 8001f50:	08001fbf 	.word	0x08001fbf
 8001f54:	08001f6d 	.word	0x08001f6d
 8001f58:	08001f81 	.word	0x08001f81
 8001f5c:	4a76      	ldr	r2, [pc, #472]	@ (8002138 <HAL_GPIO_Init+0x2a8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d013      	beq.n	8001f8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f62:	e02c      	b.n	8001fbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	623b      	str	r3, [r7, #32]
          break;
 8001f6a:	e029      	b.n	8001fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	3304      	adds	r3, #4
 8001f72:	623b      	str	r3, [r7, #32]
          break;
 8001f74:	e024      	b.n	8001fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	3308      	adds	r3, #8
 8001f7c:	623b      	str	r3, [r7, #32]
          break;
 8001f7e:	e01f      	b.n	8001fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	330c      	adds	r3, #12
 8001f86:	623b      	str	r3, [r7, #32]
          break;
 8001f88:	e01a      	b.n	8001fc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d102      	bne.n	8001f98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f92:	2304      	movs	r3, #4
 8001f94:	623b      	str	r3, [r7, #32]
          break;
 8001f96:	e013      	b.n	8001fc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d105      	bne.n	8001fac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	611a      	str	r2, [r3, #16]
          break;
 8001faa:	e009      	b.n	8001fc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fac:	2308      	movs	r3, #8
 8001fae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	615a      	str	r2, [r3, #20]
          break;
 8001fb6:	e003      	b.n	8001fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	623b      	str	r3, [r7, #32]
          break;
 8001fbc:	e000      	b.n	8001fc0 <HAL_GPIO_Init+0x130>
          break;
 8001fbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2bff      	cmp	r3, #255	@ 0xff
 8001fc4:	d801      	bhi.n	8001fca <HAL_GPIO_Init+0x13a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	e001      	b.n	8001fce <HAL_GPIO_Init+0x13e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2bff      	cmp	r3, #255	@ 0xff
 8001fd4:	d802      	bhi.n	8001fdc <HAL_GPIO_Init+0x14c>
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	e002      	b.n	8001fe2 <HAL_GPIO_Init+0x152>
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	3b08      	subs	r3, #8
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	210f      	movs	r1, #15
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	6a39      	ldr	r1, [r7, #32]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 80a9 	beq.w	8002162 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002010:	4b4a      	ldr	r3, [pc, #296]	@ (800213c <HAL_GPIO_Init+0x2ac>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	4a49      	ldr	r2, [pc, #292]	@ (800213c <HAL_GPIO_Init+0x2ac>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6193      	str	r3, [r2, #24]
 800201c:	4b47      	ldr	r3, [pc, #284]	@ (800213c <HAL_GPIO_Init+0x2ac>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002028:	4a45      	ldr	r2, [pc, #276]	@ (8002140 <HAL_GPIO_Init+0x2b0>)
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	3302      	adds	r3, #2
 8002030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002034:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	220f      	movs	r2, #15
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4013      	ands	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3d      	ldr	r2, [pc, #244]	@ (8002144 <HAL_GPIO_Init+0x2b4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00d      	beq.n	8002070 <HAL_GPIO_Init+0x1e0>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3c      	ldr	r2, [pc, #240]	@ (8002148 <HAL_GPIO_Init+0x2b8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d007      	beq.n	800206c <HAL_GPIO_Init+0x1dc>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a3b      	ldr	r2, [pc, #236]	@ (800214c <HAL_GPIO_Init+0x2bc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <HAL_GPIO_Init+0x1d8>
 8002064:	2302      	movs	r3, #2
 8002066:	e004      	b.n	8002072 <HAL_GPIO_Init+0x1e2>
 8002068:	2303      	movs	r3, #3
 800206a:	e002      	b.n	8002072 <HAL_GPIO_Init+0x1e2>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <HAL_GPIO_Init+0x1e2>
 8002070:	2300      	movs	r3, #0
 8002072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002074:	f002 0203 	and.w	r2, r2, #3
 8002078:	0092      	lsls	r2, r2, #2
 800207a:	4093      	lsls	r3, r2
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002082:	492f      	ldr	r1, [pc, #188]	@ (8002140 <HAL_GPIO_Init+0x2b0>)
 8002084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800209c:	4b2c      	ldr	r3, [pc, #176]	@ (8002150 <HAL_GPIO_Init+0x2c0>)
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	492b      	ldr	r1, [pc, #172]	@ (8002150 <HAL_GPIO_Init+0x2c0>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	608b      	str	r3, [r1, #8]
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020aa:	4b29      	ldr	r3, [pc, #164]	@ (8002150 <HAL_GPIO_Init+0x2c0>)
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	4927      	ldr	r1, [pc, #156]	@ (8002150 <HAL_GPIO_Init+0x2c0>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020c4:	4b22      	ldr	r3, [pc, #136]	@ (8002150 <HAL_GPIO_Init+0x2c0>)
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	4921      	ldr	r1, [pc, #132]	@ (8002150 <HAL_GPIO_Init+0x2c0>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60cb      	str	r3, [r1, #12]
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002150 <HAL_GPIO_Init+0x2c0>)
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	43db      	mvns	r3, r3
 80020da:	491d      	ldr	r1, [pc, #116]	@ (8002150 <HAL_GPIO_Init+0x2c0>)
 80020dc:	4013      	ands	r3, r2
 80020de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d006      	beq.n	80020fa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020ec:	4b18      	ldr	r3, [pc, #96]	@ (8002150 <HAL_GPIO_Init+0x2c0>)
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	4917      	ldr	r1, [pc, #92]	@ (8002150 <HAL_GPIO_Init+0x2c0>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
 80020f8:	e006      	b.n	8002108 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <HAL_GPIO_Init+0x2c0>)
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	43db      	mvns	r3, r3
 8002102:	4913      	ldr	r1, [pc, #76]	@ (8002150 <HAL_GPIO_Init+0x2c0>)
 8002104:	4013      	ands	r3, r2
 8002106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01f      	beq.n	8002154 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002114:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <HAL_GPIO_Init+0x2c0>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	490d      	ldr	r1, [pc, #52]	@ (8002150 <HAL_GPIO_Init+0x2c0>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
 8002120:	e01f      	b.n	8002162 <HAL_GPIO_Init+0x2d2>
 8002122:	bf00      	nop
 8002124:	10320000 	.word	0x10320000
 8002128:	10310000 	.word	0x10310000
 800212c:	10220000 	.word	0x10220000
 8002130:	10210000 	.word	0x10210000
 8002134:	10120000 	.word	0x10120000
 8002138:	10110000 	.word	0x10110000
 800213c:	40021000 	.word	0x40021000
 8002140:	40010000 	.word	0x40010000
 8002144:	40010800 	.word	0x40010800
 8002148:	40010c00 	.word	0x40010c00
 800214c:	40011000 	.word	0x40011000
 8002150:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002154:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <HAL_GPIO_Init+0x2f4>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	43db      	mvns	r3, r3
 800215c:	4909      	ldr	r1, [pc, #36]	@ (8002184 <HAL_GPIO_Init+0x2f4>)
 800215e:	4013      	ands	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	3301      	adds	r3, #1
 8002166:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	f47f ae96 	bne.w	8001ea4 <HAL_GPIO_Init+0x14>
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	372c      	adds	r7, #44	@ 0x2c
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	40010400 	.word	0x40010400

08002188 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	887b      	ldrh	r3, [r7, #2]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	e001      	b.n	80021aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	807b      	strh	r3, [r7, #2]
 80021c2:	4613      	mov	r3, r2
 80021c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021c6:	787b      	ldrb	r3, [r7, #1]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021cc:	887a      	ldrh	r2, [r7, #2]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021d2:	e003      	b.n	80021dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021d4:	887b      	ldrh	r3, [r7, #2]
 80021d6:	041a      	lsls	r2, r3, #16
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	611a      	str	r2, [r3, #16]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	460b      	mov	r3, r1
 80021f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021f8:	887a      	ldrh	r2, [r7, #2]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4013      	ands	r3, r2
 80021fe:	041a      	lsls	r2, r3, #16
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43d9      	mvns	r1, r3
 8002204:	887b      	ldrh	r3, [r7, #2]
 8002206:	400b      	ands	r3, r1
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	611a      	str	r2, [r3, #16]
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e272      	b.n	8002710 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8087 	beq.w	8002346 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002238:	4b92      	ldr	r3, [pc, #584]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b04      	cmp	r3, #4
 8002242:	d00c      	beq.n	800225e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002244:	4b8f      	ldr	r3, [pc, #572]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b08      	cmp	r3, #8
 800224e:	d112      	bne.n	8002276 <HAL_RCC_OscConfig+0x5e>
 8002250:	4b8c      	ldr	r3, [pc, #560]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800225c:	d10b      	bne.n	8002276 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225e:	4b89      	ldr	r3, [pc, #548]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d06c      	beq.n	8002344 <HAL_RCC_OscConfig+0x12c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d168      	bne.n	8002344 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e24c      	b.n	8002710 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x76>
 8002280:	4b80      	ldr	r3, [pc, #512]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a7f      	ldr	r2, [pc, #508]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 8002286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	e02e      	b.n	80022ec <HAL_RCC_OscConfig+0xd4>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x98>
 8002296:	4b7b      	ldr	r3, [pc, #492]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a7a      	ldr	r2, [pc, #488]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 800229c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4b78      	ldr	r3, [pc, #480]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a77      	ldr	r2, [pc, #476]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	e01d      	b.n	80022ec <HAL_RCC_OscConfig+0xd4>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022b8:	d10c      	bne.n	80022d4 <HAL_RCC_OscConfig+0xbc>
 80022ba:	4b72      	ldr	r3, [pc, #456]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a71      	ldr	r2, [pc, #452]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e00b      	b.n	80022ec <HAL_RCC_OscConfig+0xd4>
 80022d4:	4b6b      	ldr	r3, [pc, #428]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 80022da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b68      	ldr	r3, [pc, #416]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a67      	ldr	r2, [pc, #412]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d013      	beq.n	800231c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7ff fcb4 	bl	8001c60 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022fc:	f7ff fcb0 	bl	8001c60 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	@ 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e200      	b.n	8002710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	4b5d      	ldr	r3, [pc, #372]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0xe4>
 800231a:	e014      	b.n	8002346 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7ff fca0 	bl	8001c60 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002324:	f7ff fc9c 	bl	8001c60 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	@ 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e1ec      	b.n	8002710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002336:	4b53      	ldr	r3, [pc, #332]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x10c>
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d063      	beq.n	800241a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002352:	4b4c      	ldr	r3, [pc, #304]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800235e:	4b49      	ldr	r3, [pc, #292]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b08      	cmp	r3, #8
 8002368:	d11c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x18c>
 800236a:	4b46      	ldr	r3, [pc, #280]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d116      	bne.n	80023a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002376:	4b43      	ldr	r3, [pc, #268]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_RCC_OscConfig+0x176>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e1c0      	b.n	8002710 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238e:	4b3d      	ldr	r3, [pc, #244]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4939      	ldr	r1, [pc, #228]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a2:	e03a      	b.n	800241a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023ac:	4b36      	ldr	r3, [pc, #216]	@ (8002488 <HAL_RCC_OscConfig+0x270>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7ff fc55 	bl	8001c60 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ba:	f7ff fc51 	bl	8001c60 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e1a1      	b.n	8002710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4927      	ldr	r1, [pc, #156]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	600b      	str	r3, [r1, #0]
 80023ec:	e015      	b.n	800241a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ee:	4b26      	ldr	r3, [pc, #152]	@ (8002488 <HAL_RCC_OscConfig+0x270>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7ff fc34 	bl	8001c60 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fc:	f7ff fc30 	bl	8001c60 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e180      	b.n	8002710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240e:	4b1d      	ldr	r3, [pc, #116]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d03a      	beq.n	800249c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d019      	beq.n	8002462 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800242e:	4b17      	ldr	r3, [pc, #92]	@ (800248c <HAL_RCC_OscConfig+0x274>)
 8002430:	2201      	movs	r2, #1
 8002432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002434:	f7ff fc14 	bl	8001c60 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800243c:	f7ff fc10 	bl	8001c60 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e160      	b.n	8002710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244e:	4b0d      	ldr	r3, [pc, #52]	@ (8002484 <HAL_RCC_OscConfig+0x26c>)
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800245a:	2001      	movs	r0, #1
 800245c:	f000 fa9c 	bl	8002998 <RCC_Delay>
 8002460:	e01c      	b.n	800249c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002462:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <HAL_RCC_OscConfig+0x274>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002468:	f7ff fbfa 	bl	8001c60 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246e:	e00f      	b.n	8002490 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002470:	f7ff fbf6 	bl	8001c60 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d908      	bls.n	8002490 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e146      	b.n	8002710 <HAL_RCC_OscConfig+0x4f8>
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	42420000 	.word	0x42420000
 800248c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002490:	4b92      	ldr	r3, [pc, #584]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e9      	bne.n	8002470 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80a6 	beq.w	80025f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ae:	4b8b      	ldr	r3, [pc, #556]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10d      	bne.n	80024d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	4b88      	ldr	r3, [pc, #544]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	4a87      	ldr	r2, [pc, #540]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c4:	61d3      	str	r3, [r2, #28]
 80024c6:	4b85      	ldr	r3, [pc, #532]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d2:	2301      	movs	r3, #1
 80024d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d6:	4b82      	ldr	r3, [pc, #520]	@ (80026e0 <HAL_RCC_OscConfig+0x4c8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d118      	bne.n	8002514 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e2:	4b7f      	ldr	r3, [pc, #508]	@ (80026e0 <HAL_RCC_OscConfig+0x4c8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a7e      	ldr	r2, [pc, #504]	@ (80026e0 <HAL_RCC_OscConfig+0x4c8>)
 80024e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ee:	f7ff fbb7 	bl	8001c60 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f6:	f7ff fbb3 	bl	8001c60 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b64      	cmp	r3, #100	@ 0x64
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e103      	b.n	8002710 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002508:	4b75      	ldr	r3, [pc, #468]	@ (80026e0 <HAL_RCC_OscConfig+0x4c8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d106      	bne.n	800252a <HAL_RCC_OscConfig+0x312>
 800251c:	4b6f      	ldr	r3, [pc, #444]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	4a6e      	ldr	r2, [pc, #440]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6213      	str	r3, [r2, #32]
 8002528:	e02d      	b.n	8002586 <HAL_RCC_OscConfig+0x36e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10c      	bne.n	800254c <HAL_RCC_OscConfig+0x334>
 8002532:	4b6a      	ldr	r3, [pc, #424]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	4a69      	ldr	r2, [pc, #420]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 8002538:	f023 0301 	bic.w	r3, r3, #1
 800253c:	6213      	str	r3, [r2, #32]
 800253e:	4b67      	ldr	r3, [pc, #412]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	4a66      	ldr	r2, [pc, #408]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 8002544:	f023 0304 	bic.w	r3, r3, #4
 8002548:	6213      	str	r3, [r2, #32]
 800254a:	e01c      	b.n	8002586 <HAL_RCC_OscConfig+0x36e>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b05      	cmp	r3, #5
 8002552:	d10c      	bne.n	800256e <HAL_RCC_OscConfig+0x356>
 8002554:	4b61      	ldr	r3, [pc, #388]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4a60      	ldr	r2, [pc, #384]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 800255a:	f043 0304 	orr.w	r3, r3, #4
 800255e:	6213      	str	r3, [r2, #32]
 8002560:	4b5e      	ldr	r3, [pc, #376]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	4a5d      	ldr	r2, [pc, #372]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6213      	str	r3, [r2, #32]
 800256c:	e00b      	b.n	8002586 <HAL_RCC_OscConfig+0x36e>
 800256e:	4b5b      	ldr	r3, [pc, #364]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4a5a      	ldr	r2, [pc, #360]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	6213      	str	r3, [r2, #32]
 800257a:	4b58      	ldr	r3, [pc, #352]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	4a57      	ldr	r2, [pc, #348]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 8002580:	f023 0304 	bic.w	r3, r3, #4
 8002584:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d015      	beq.n	80025ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258e:	f7ff fb67 	bl	8001c60 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002594:	e00a      	b.n	80025ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7ff fb63 	bl	8001c60 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e0b1      	b.n	8002710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ac:	4b4b      	ldr	r3, [pc, #300]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0ee      	beq.n	8002596 <HAL_RCC_OscConfig+0x37e>
 80025b8:	e014      	b.n	80025e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ba:	f7ff fb51 	bl	8001c60 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c0:	e00a      	b.n	80025d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c2:	f7ff fb4d 	bl	8001c60 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e09b      	b.n	8002710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d8:	4b40      	ldr	r3, [pc, #256]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1ee      	bne.n	80025c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025e4:	7dfb      	ldrb	r3, [r7, #23]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d105      	bne.n	80025f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ea:	4b3c      	ldr	r3, [pc, #240]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	4a3b      	ldr	r2, [pc, #236]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 8087 	beq.w	800270e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002600:	4b36      	ldr	r3, [pc, #216]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b08      	cmp	r3, #8
 800260a:	d061      	beq.n	80026d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d146      	bne.n	80026a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002614:	4b33      	ldr	r3, [pc, #204]	@ (80026e4 <HAL_RCC_OscConfig+0x4cc>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261a:	f7ff fb21 	bl	8001c60 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002622:	f7ff fb1d 	bl	8001c60 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e06d      	b.n	8002710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002634:	4b29      	ldr	r3, [pc, #164]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1f0      	bne.n	8002622 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002648:	d108      	bne.n	800265c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800264a:	4b24      	ldr	r3, [pc, #144]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	4921      	ldr	r1, [pc, #132]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800265c:	4b1f      	ldr	r3, [pc, #124]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a19      	ldr	r1, [r3, #32]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266c:	430b      	orrs	r3, r1
 800266e:	491b      	ldr	r1, [pc, #108]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002674:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <HAL_RCC_OscConfig+0x4cc>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267a:	f7ff faf1 	bl	8001c60 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002682:	f7ff faed 	bl	8001c60 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e03d      	b.n	8002710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002694:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x46a>
 80026a0:	e035      	b.n	800270e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <HAL_RCC_OscConfig+0x4cc>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7ff fada 	bl	8001c60 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b0:	f7ff fad6 	bl	8001c60 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e026      	b.n	8002710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c2:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x498>
 80026ce:	e01e      	b.n	800270e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d107      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e019      	b.n	8002710 <HAL_RCC_OscConfig+0x4f8>
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40007000 	.word	0x40007000
 80026e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002718 <HAL_RCC_OscConfig+0x500>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d106      	bne.n	800270a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d001      	beq.n	800270e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000

0800271c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0d0      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002730:	4b6a      	ldr	r3, [pc, #424]	@ (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d910      	bls.n	8002760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b67      	ldr	r3, [pc, #412]	@ (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 0207 	bic.w	r2, r3, #7
 8002746:	4965      	ldr	r1, [pc, #404]	@ (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274e:	4b63      	ldr	r3, [pc, #396]	@ (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d001      	beq.n	8002760 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0b8      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d020      	beq.n	80027ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002778:	4b59      	ldr	r3, [pc, #356]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a58      	ldr	r2, [pc, #352]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002782:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002790:	4b53      	ldr	r3, [pc, #332]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a52      	ldr	r2, [pc, #328]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800279a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800279c:	4b50      	ldr	r3, [pc, #320]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	494d      	ldr	r1, [pc, #308]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d040      	beq.n	800283c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	4b47      	ldr	r3, [pc, #284]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d115      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e07f      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027da:	4b41      	ldr	r3, [pc, #260]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e073      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ea:	4b3d      	ldr	r3, [pc, #244]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e06b      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fa:	4b39      	ldr	r3, [pc, #228]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f023 0203 	bic.w	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4936      	ldr	r1, [pc, #216]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800280c:	f7ff fa28 	bl	8001c60 <HAL_GetTick>
 8002810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	e00a      	b.n	800282a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002814:	f7ff fa24 	bl	8001c60 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e053      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	4b2d      	ldr	r3, [pc, #180]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 020c 	and.w	r2, r3, #12
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	429a      	cmp	r2, r3
 800283a:	d1eb      	bne.n	8002814 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800283c:	4b27      	ldr	r3, [pc, #156]	@ (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d210      	bcs.n	800286c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b24      	ldr	r3, [pc, #144]	@ (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 0207 	bic.w	r2, r3, #7
 8002852:	4922      	ldr	r1, [pc, #136]	@ (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285a:	4b20      	ldr	r3, [pc, #128]	@ (80028dc <HAL_RCC_ClockConfig+0x1c0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d001      	beq.n	800286c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e032      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002878:	4b19      	ldr	r3, [pc, #100]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4916      	ldr	r1, [pc, #88]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002896:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	490e      	ldr	r1, [pc, #56]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028aa:	f000 f821 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 80028ae:	4602      	mov	r2, r0
 80028b0:	4b0b      	ldr	r3, [pc, #44]	@ (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	490a      	ldr	r1, [pc, #40]	@ (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028bc:	5ccb      	ldrb	r3, [r1, r3]
 80028be:	fa22 f303 	lsr.w	r3, r2, r3
 80028c2:	4a09      	ldr	r2, [pc, #36]	@ (80028e8 <HAL_RCC_ClockConfig+0x1cc>)
 80028c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028c6:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <HAL_RCC_ClockConfig+0x1d0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff f986 	bl	8001bdc <HAL_InitTick>

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40022000 	.word	0x40022000
 80028e0:	40021000 	.word	0x40021000
 80028e4:	080031fc 	.word	0x080031fc
 80028e8:	20000024 	.word	0x20000024
 80028ec:	20000028 	.word	0x20000028

080028f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	2300      	movs	r3, #0
 8002904:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800290a:	4b1e      	ldr	r3, [pc, #120]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x94>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b04      	cmp	r3, #4
 8002918:	d002      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x30>
 800291a:	2b08      	cmp	r3, #8
 800291c:	d003      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0x36>
 800291e:	e027      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002920:	4b19      	ldr	r3, [pc, #100]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x98>)
 8002922:	613b      	str	r3, [r7, #16]
      break;
 8002924:	e027      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	0c9b      	lsrs	r3, r3, #18
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	4a17      	ldr	r2, [pc, #92]	@ (800298c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002930:	5cd3      	ldrb	r3, [r2, r3]
 8002932:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d010      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800293e:	4b11      	ldr	r3, [pc, #68]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x94>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	0c5b      	lsrs	r3, r3, #17
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	4a11      	ldr	r2, [pc, #68]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xa0>)
 800294a:	5cd3      	ldrb	r3, [r2, r3]
 800294c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a0d      	ldr	r2, [pc, #52]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x98>)
 8002952:	fb03 f202 	mul.w	r2, r3, r2
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	e004      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a0c      	ldr	r2, [pc, #48]	@ (8002994 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002964:	fb02 f303 	mul.w	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	613b      	str	r3, [r7, #16]
      break;
 800296e:	e002      	b.n	8002976 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002970:	4b05      	ldr	r3, [pc, #20]	@ (8002988 <HAL_RCC_GetSysClockFreq+0x98>)
 8002972:	613b      	str	r3, [r7, #16]
      break;
 8002974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002976:	693b      	ldr	r3, [r7, #16]
}
 8002978:	4618      	mov	r0, r3
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40021000 	.word	0x40021000
 8002988:	007a1200 	.word	0x007a1200
 800298c:	0800320c 	.word	0x0800320c
 8002990:	0800321c 	.word	0x0800321c
 8002994:	003d0900 	.word	0x003d0900

08002998 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029a0:	4b0a      	ldr	r3, [pc, #40]	@ (80029cc <RCC_Delay+0x34>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0a      	ldr	r2, [pc, #40]	@ (80029d0 <RCC_Delay+0x38>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0a5b      	lsrs	r3, r3, #9
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029b4:	bf00      	nop
  }
  while (Delay --);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1e5a      	subs	r2, r3, #1
 80029ba:	60fa      	str	r2, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f9      	bne.n	80029b4 <RCC_Delay+0x1c>
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	20000024 	.word	0x20000024
 80029d0:	10624dd3 	.word	0x10624dd3

080029d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e041      	b.n	8002a6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fe fff6 	bl	80019ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f000 fa56 	bl	8002ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d001      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e035      	b.n	8002af8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a16      	ldr	r2, [pc, #88]	@ (8002b04 <HAL_TIM_Base_Start_IT+0x90>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d009      	beq.n	8002ac2 <HAL_TIM_Base_Start_IT+0x4e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ab6:	d004      	beq.n	8002ac2 <HAL_TIM_Base_Start_IT+0x4e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a12      	ldr	r2, [pc, #72]	@ (8002b08 <HAL_TIM_Base_Start_IT+0x94>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d111      	bne.n	8002ae6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b06      	cmp	r3, #6
 8002ad2:	d010      	beq.n	8002af6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae4:	e007      	b.n	8002af6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0201 	orr.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40012c00 	.word	0x40012c00
 8002b08:	40000400 	.word	0x40000400

08002b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d020      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01b      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0202 	mvn.w	r2, #2
 8002b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f998 	bl	8002e8c <HAL_TIM_IC_CaptureCallback>
 8002b5c:	e005      	b.n	8002b6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f98b 	bl	8002e7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f99a 	bl	8002e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d020      	beq.n	8002bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d01b      	beq.n	8002bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0204 	mvn.w	r2, #4
 8002b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2202      	movs	r2, #2
 8002b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f972 	bl	8002e8c <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f965 	bl	8002e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f974 	bl	8002e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d020      	beq.n	8002c08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01b      	beq.n	8002c08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0208 	mvn.w	r2, #8
 8002bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2204      	movs	r2, #4
 8002bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f94c 	bl	8002e8c <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f93f 	bl	8002e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f94e 	bl	8002e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d020      	beq.n	8002c54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01b      	beq.n	8002c54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0210 	mvn.w	r2, #16
 8002c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2208      	movs	r2, #8
 8002c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f926 	bl	8002e8c <HAL_TIM_IC_CaptureCallback>
 8002c40:	e005      	b.n	8002c4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f919 	bl	8002e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f928 	bl	8002e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00c      	beq.n	8002c78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0201 	mvn.w	r2, #1
 8002c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe fcfe 	bl	8001674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00c      	beq.n	8002c9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fa6f 	bl	800317a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00c      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d007      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f8f8 	bl	8002eb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00c      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d007      	beq.n	8002ce4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0220 	mvn.w	r2, #32
 8002cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fa42 	bl	8003168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_TIM_ConfigClockSource+0x1c>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e0b4      	b.n	8002e72 <HAL_TIM_ConfigClockSource+0x186>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d40:	d03e      	beq.n	8002dc0 <HAL_TIM_ConfigClockSource+0xd4>
 8002d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d46:	f200 8087 	bhi.w	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d4e:	f000 8086 	beq.w	8002e5e <HAL_TIM_ConfigClockSource+0x172>
 8002d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d56:	d87f      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d58:	2b70      	cmp	r3, #112	@ 0x70
 8002d5a:	d01a      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0xa6>
 8002d5c:	2b70      	cmp	r3, #112	@ 0x70
 8002d5e:	d87b      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d60:	2b60      	cmp	r3, #96	@ 0x60
 8002d62:	d050      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x11a>
 8002d64:	2b60      	cmp	r3, #96	@ 0x60
 8002d66:	d877      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d68:	2b50      	cmp	r3, #80	@ 0x50
 8002d6a:	d03c      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0xfa>
 8002d6c:	2b50      	cmp	r3, #80	@ 0x50
 8002d6e:	d873      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d70:	2b40      	cmp	r3, #64	@ 0x40
 8002d72:	d058      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x13a>
 8002d74:	2b40      	cmp	r3, #64	@ 0x40
 8002d76:	d86f      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d78:	2b30      	cmp	r3, #48	@ 0x30
 8002d7a:	d064      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x15a>
 8002d7c:	2b30      	cmp	r3, #48	@ 0x30
 8002d7e:	d86b      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d060      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x15a>
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d867      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d05c      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x15a>
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d05a      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x15a>
 8002d90:	e062      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002da2:	f000 f96a 	bl	800307a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002db4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	609a      	str	r2, [r3, #8]
      break;
 8002dbe:	e04f      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dd0:	f000 f953 	bl	800307a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002de2:	609a      	str	r2, [r3, #8]
      break;
 8002de4:	e03c      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df2:	461a      	mov	r2, r3
 8002df4:	f000 f8ca 	bl	8002f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2150      	movs	r1, #80	@ 0x50
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f921 	bl	8003046 <TIM_ITRx_SetConfig>
      break;
 8002e04:	e02c      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e12:	461a      	mov	r2, r3
 8002e14:	f000 f8e8 	bl	8002fe8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2160      	movs	r1, #96	@ 0x60
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f911 	bl	8003046 <TIM_ITRx_SetConfig>
      break;
 8002e24:	e01c      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e32:	461a      	mov	r2, r3
 8002e34:	f000 f8aa 	bl	8002f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2140      	movs	r1, #64	@ 0x40
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 f901 	bl	8003046 <TIM_ITRx_SetConfig>
      break;
 8002e44:	e00c      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4610      	mov	r0, r2
 8002e52:	f000 f8f8 	bl	8003046 <TIM_ITRx_SetConfig>
      break;
 8002e56:	e003      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e5c:	e000      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
	...

08002ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a2b      	ldr	r2, [pc, #172]	@ (8002f84 <TIM_Base_SetConfig+0xc0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d007      	beq.n	8002eec <TIM_Base_SetConfig+0x28>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee2:	d003      	beq.n	8002eec <TIM_Base_SetConfig+0x28>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a28      	ldr	r2, [pc, #160]	@ (8002f88 <TIM_Base_SetConfig+0xc4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d108      	bne.n	8002efe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a20      	ldr	r2, [pc, #128]	@ (8002f84 <TIM_Base_SetConfig+0xc0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d007      	beq.n	8002f16 <TIM_Base_SetConfig+0x52>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f0c:	d003      	beq.n	8002f16 <TIM_Base_SetConfig+0x52>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1d      	ldr	r2, [pc, #116]	@ (8002f88 <TIM_Base_SetConfig+0xc4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d108      	bne.n	8002f28 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a0d      	ldr	r2, [pc, #52]	@ (8002f84 <TIM_Base_SetConfig+0xc0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d103      	bne.n	8002f5c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f023 0201 	bic.w	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	611a      	str	r2, [r3, #16]
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	40012c00 	.word	0x40012c00
 8002f88:	40000400 	.word	0x40000400

08002f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	f023 0201 	bic.w	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f023 030a 	bic.w	r3, r3, #10
 8002fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	621a      	str	r2, [r3, #32]
}
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f023 0210 	bic.w	r2, r3, #16
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	031b      	lsls	r3, r3, #12
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003024:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	621a      	str	r2, [r3, #32]
}
 800303c:	bf00      	nop
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800305c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	f043 0307 	orr.w	r3, r3, #7
 8003068:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	609a      	str	r2, [r3, #8]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr

0800307a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800307a:	b480      	push	{r7}
 800307c:	b087      	sub	sp, #28
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003094:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	021a      	lsls	r2, r3, #8
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	431a      	orrs	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	609a      	str	r2, [r3, #8]
}
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr

080030b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e041      	b.n	8003154 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a14      	ldr	r2, [pc, #80]	@ (8003160 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d009      	beq.n	8003128 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800311c:	d004      	beq.n	8003128 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a10      	ldr	r2, [pc, #64]	@ (8003164 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d10c      	bne.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800312e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	4313      	orrs	r3, r2
 8003138:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40012c00 	.word	0x40012c00
 8003164:	40000400 	.word	0x40000400

08003168 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr

0800317a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <memset>:
 800318c:	4603      	mov	r3, r0
 800318e:	4402      	add	r2, r0
 8003190:	4293      	cmp	r3, r2
 8003192:	d100      	bne.n	8003196 <memset+0xa>
 8003194:	4770      	bx	lr
 8003196:	f803 1b01 	strb.w	r1, [r3], #1
 800319a:	e7f9      	b.n	8003190 <memset+0x4>

0800319c <__libc_init_array>:
 800319c:	b570      	push	{r4, r5, r6, lr}
 800319e:	2600      	movs	r6, #0
 80031a0:	4d0c      	ldr	r5, [pc, #48]	@ (80031d4 <__libc_init_array+0x38>)
 80031a2:	4c0d      	ldr	r4, [pc, #52]	@ (80031d8 <__libc_init_array+0x3c>)
 80031a4:	1b64      	subs	r4, r4, r5
 80031a6:	10a4      	asrs	r4, r4, #2
 80031a8:	42a6      	cmp	r6, r4
 80031aa:	d109      	bne.n	80031c0 <__libc_init_array+0x24>
 80031ac:	f000 f81a 	bl	80031e4 <_init>
 80031b0:	2600      	movs	r6, #0
 80031b2:	4d0a      	ldr	r5, [pc, #40]	@ (80031dc <__libc_init_array+0x40>)
 80031b4:	4c0a      	ldr	r4, [pc, #40]	@ (80031e0 <__libc_init_array+0x44>)
 80031b6:	1b64      	subs	r4, r4, r5
 80031b8:	10a4      	asrs	r4, r4, #2
 80031ba:	42a6      	cmp	r6, r4
 80031bc:	d105      	bne.n	80031ca <__libc_init_array+0x2e>
 80031be:	bd70      	pop	{r4, r5, r6, pc}
 80031c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c4:	4798      	blx	r3
 80031c6:	3601      	adds	r6, #1
 80031c8:	e7ee      	b.n	80031a8 <__libc_init_array+0xc>
 80031ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ce:	4798      	blx	r3
 80031d0:	3601      	adds	r6, #1
 80031d2:	e7f2      	b.n	80031ba <__libc_init_array+0x1e>
 80031d4:	08003220 	.word	0x08003220
 80031d8:	08003220 	.word	0x08003220
 80031dc:	08003220 	.word	0x08003220
 80031e0:	08003224 	.word	0x08003224

080031e4 <_init>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	bf00      	nop
 80031e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ea:	bc08      	pop	{r3}
 80031ec:	469e      	mov	lr, r3
 80031ee:	4770      	bx	lr

080031f0 <_fini>:
 80031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f2:	bf00      	nop
 80031f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f6:	bc08      	pop	{r3}
 80031f8:	469e      	mov	lr, r3
 80031fa:	4770      	bx	lr
